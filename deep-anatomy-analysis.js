// –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞—Ç–æ–º–∏–∏ –∞–∫—Ç—ë—Ä–∞
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ FoundryVTT

function deepAnatomyAnalysis() {
  console.log("=== –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –•–†–ê–ù–ï–ù–ò–Ø –ê–ù–ê–¢–û–ú–ò–ò ===");
  
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor || actor.type !== 'character') {
    console.error("‚ùå –ù–µ—Ç –∞–∫—Ç—ë—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    return;
  }
  
  console.log(`üé≠ –ê–∫—Ç—ë—Ä: ${actor.name} (${actor.id})`);
  
  // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  console.log("\n=== 1. –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ê–ö–¢–Å–†–ê ===");
  
  console.log("üîç actor.system:");
  console.log(actor.system);
  
  console.log("\nüîç actor._source.system:");
  console.log(actor._source.system);
  
  console.log("\nüîç actor.data?.system (–µ—Å–ª–∏ –µ—Å—Ç—å):");
  console.log(actor.data?.system || "–ù–ï–¢");
  
  // 2. –ò—â–µ–º —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –≤–µ–∑–¥–µ
  console.log("\n=== 2. –ü–û–ò–°–ö –ß–ê–°–¢–ï–ô –¢–ï–õ–ê ===");
  
  const locations = [
    { name: "system.anatomy.bodyParts", data: actor.system.anatomy?.bodyParts },
    { name: "system.health.bodyParts", data: actor.system.health?.bodyParts },
    { name: "_source.system.anatomy.bodyParts", data: actor._source.system.anatomy?.bodyParts },
    { name: "_source.system.health.bodyParts", data: actor._source.system.health?.bodyParts },
    { name: "data.system.anatomy.bodyParts", data: actor.data?.system?.anatomy?.bodyParts },
    { name: "data.system.health.bodyParts", data: actor.data?.system?.health?.bodyParts }
  ];
  
  locations.forEach(location => {
    if (location.data) {
      console.log(`üìç ${location.name}: ${Object.keys(location.data).length} —á–∞—Å—Ç–µ–π`);
      Object.keys(location.data).forEach(id => {
        console.log(`  - ${id}: ${location.data[id].name}`);
      });
    } else {
      console.log(`‚ùå ${location.name}: –ù–ï–¢ –î–ê–ù–ù–´–•`);
    }
    console.log("");
  });
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
  console.log("\n=== 3. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–°–¢–ê –•–†–ê–ù–ï–ù–ò–Ø ===");
  console.log("üîç actor.flags:", actor.flags);
  console.log("üîç actor.system (–ø–æ–ª–Ω–æ—Å—Ç—å—é):");
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º bodyParts
  function findBodyParts(obj, path = "") {
    const found = [];
    
    if (obj && typeof obj === 'object') {
      for (let [key, value] of Object.entries(obj)) {
        const currentPath = path ? `${path}.${key}` : key;
        
        if (key === 'bodyParts' && value && typeof value === 'object') {
          found.push({
            path: currentPath,
            count: Object.keys(value).length,
            data: value
          });
        } else if (value && typeof value === 'object' && !Array.isArray(value)) {
          found.push(...findBodyParts(value, currentPath));
        }
      }
    }
    
    return found;
  }
  
  const allBodyParts = findBodyParts(actor.system);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${allBodyParts.length} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π bodyParts:`);
  allBodyParts.forEach(location => {
    console.log(`  üìç ${location.path}: ${location.count} —á–∞—Å—Ç–µ–π`);
  });
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—à –∫–æ–¥
  console.log("\n=== 4. –ß–¢–û –í–ò–î–ò–¢ –ù–ê–® –ö–û–î ===");
  
  const bodyPartsUsedByCode = actor.system.anatomy?.bodyParts || actor.system.health?.bodyParts;
  if (bodyPartsUsedByCode) {
    console.log(`üéØ –ù–∞—à –∫–æ–¥ –≤–∏–¥–∏—Ç: ${Object.keys(bodyPartsUsedByCode).length} —á–∞—Å—Ç–µ–π`);
    console.log("üìã –°–ø–∏—Å–æ–∫:");
    Object.keys(bodyPartsUsedByCode).forEach(id => {
      console.log(`  - ${id}: ${bodyPartsUsedByCode[id].name}`);
    });
  } else {
    console.log("‚ùå –ù–∞—à –∫–æ–¥ –Ω–µ –≤–∏–¥–∏—Ç —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ update()
function testUpdateBehavior() {
  console.log("\n=== –¢–ï–°–¢ –ü–û–í–ï–î–ï–ù–ò–Ø UPDATE ===");
  
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor || actor.type !== 'character') {
    console.error("‚ùå –ù–µ—Ç –∞–∫—Ç—ë—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }
  
  console.log("üìä –î–û update:");
  console.log("  - anatomy.bodyParts:", Object.keys(actor.system.anatomy?.bodyParts || {}).length);
  console.log("  - health.bodyParts:", Object.keys(actor.system.health?.bodyParts || {}).length);
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—á–∏—Å—Ç–∫–∏
  const clearMethods = [
    {
      name: "–°–ø–æ—Å–æ–± 1: –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ null",
      updateData: {
        'system.anatomy.bodyParts': null,
        'system.health.bodyParts': null
      }
    },
    {
      name: "–°–ø–æ—Å–æ–± 2: –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ {}",
      updateData: {
        'system.anatomy.bodyParts': {},
        'system.health.bodyParts': {}
      }
    },
    {
      name: "–°–ø–æ—Å–æ–± 3: –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ -=",
      updateData: {
        'system.anatomy.-=bodyParts': null,
        'system.health.-=bodyParts': null
      }
    }
  ];
  
  let currentMethod = 0;
  
  function testNextMethod() {
    if (currentMethod >= clearMethods.length) {
      console.log("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã");
      return;
    }
    
    const method = clearMethods[currentMethod];
    console.log(`\nüß™ ${method.name}`);
    
    actor.update(method.updateData).then(() => {
      setTimeout(() => {
        console.log("üìä –ü–û–°–õ–ï update:");
        console.log("  - anatomy.bodyParts:", Object.keys(actor.system.anatomy?.bodyParts || {}).length);
        console.log("  - health.bodyParts:", Object.keys(actor.system.health?.bodyParts || {}).length);
        console.log("  - _source anatomy.bodyParts:", Object.keys(actor._source.system.anatomy?.bodyParts || {}).length);
        console.log("  - _source health.bodyParts:", Object.keys(actor._source.system.health?.bodyParts || {}).length);
        
        currentMethod++;
        setTimeout(testNextMethod, 1000);
      }, 500);
    }).catch(err => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${method.name}:`, err);
      currentMethod++;
      setTimeout(testNextMethod, 1000);
    });
  }
  
  testNextMethod();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫—Ç—ë—Ä–∞
function checkActorHistory() {
  console.log("\n=== –ò–°–¢–û–†–ò–Ø –ê–ö–¢–Å–†–ê ===");
  
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor) return;
  
  console.log("üïí actor.constructor.name:", actor.constructor.name);
  console.log("üïí actor.documentName:", actor.documentName);
  console.log("üïí actor.id:", actor.id);
  console.log("üïí actor.uuid:", actor.uuid);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–∫—Ç—ë—Ä–∞
  console.log("\nüîç –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–∫—Ç—ë—Ä–∞:");
  const allProps = Object.getOwnPropertyNames(actor);
  allProps.forEach(prop => {
    if (prop.includes('body') || prop.includes('anatomy') || prop.includes('health')) {
      console.log(`  - ${prop}:`, actor[prop]);
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
deepAnatomyAnalysis();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.deepAnatomyAnalysis = deepAnatomyAnalysis;
window.testUpdateBehavior = testUpdateBehavior;
window.checkActorHistory = checkActorHistory;

console.log("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:");
console.log("  - testUpdateBehavior() - —Ç–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—á–∏—Å—Ç–∫–∏");
console.log("  - checkActorHistory() - –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç—ë—Ä–∞");