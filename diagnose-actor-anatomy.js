// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞—Ç–æ–º–∏–∏ —É –∞–∫—Ç—ë—Ä–∞
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ FoundryVTT

function diagnoseActorAnatomy() {
  console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –ê–ù–ê–¢–û–ú–ò–ò –ê–ö–¢–Å–†–ê ===");
  
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor || actor.type !== 'character') {
    console.error("‚ùå –ù–µ—Ç –∞–∫—Ç—ë—Ä–∞-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏");
    return;
  }
  
  console.log(`üé≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç—ë—Ä–∞: ${actor.name}`);
  console.log(`üìÑ ID –∞–∫—Ç—ë—Ä–∞: ${actor.id}`);
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—ë—Ä–∞
  console.log("\n=== 1. –ü–†–Ø–ú–´–ï –î–ê–ù–ù–´–ï –ê–ö–¢–Å–†–ê ===");
  console.log("üîç actor.system.anatomy:", actor.system.anatomy);
  console.log("üîç actor.system.health:", actor.system.health);
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º source –¥–∞–Ω–Ω—ã–µ
  console.log("\n=== 2. SOURCE –î–ê–ù–ù–´–ï ===");
  console.log("üîç actor._source.system.anatomy:", actor._source.system.anatomy);
  console.log("üîç actor._source.system.health:", actor._source.system.health);
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥—É–º–∞–µ—Ç –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞
  console.log("\n=== 3. –ê–ù–ê–õ–ò–ó –ß–ê–°–¢–ï–ô –¢–ï–õ–ê ===");
  const anatomyBodyParts = actor.system.anatomy?.bodyParts;
  const healthBodyParts = actor.system.health?.bodyParts;
  
  if (anatomyBodyParts) {
    console.log(`ü¶¥ –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞ –≤ anatomy: ${Object.keys(anatomyBodyParts).length}`);
    console.log("üìã –°–ø–∏—Å–æ–∫ (anatomy):");
    for (let [id, part] of Object.entries(anatomyBodyParts)) {
      console.log(`  - ${part.name} (${id}): ${part.currentHp}/${part.maxHp} HP`);
    }
  } else {
    console.log("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ –≤ anatomy.bodyParts");
  }
  
  if (healthBodyParts) {
    console.log(`ü¶¥ –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞ –≤ health: ${Object.keys(healthBodyParts).length}`);
    console.log("üìã –°–ø–∏—Å–æ–∫ (health):");
    for (let [id, part] of Object.entries(healthBodyParts)) {
      console.log(`  - ${part.name} (${id}): ${part.currentHp}/${part.maxHp} HP`);
    }
  } else {
    console.log("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ –≤ health.bodyParts");
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—Å—Ç –∞–∫—Ç—ë—Ä–∞
  console.log("\n=== 4. –î–ê–ù–ù–´–ï –õ–ò–°–¢–ê –ê–ö–¢–Å–†–ê ===");
  const sheet = actor.sheet;
  if (sheet && sheet.getData) {
    sheet.getData().then(context => {
      console.log("üìã hierarchicalBodyParts –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ª–∏—Å—Ç–∞:", context.hierarchicalBodyParts?.length || 0);
      if (context.hierarchicalBodyParts) {
        context.hierarchicalBodyParts.forEach(part => {
          console.log(`  - ${part.name}: ${part.currentHp}/${part.maxHp} HP`);
        });
      }
    }).catch(err => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞:", err);
    });
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥—É–º–∞–µ—Ç _prepareHealthData
  console.log("\n=== 5. –¢–ï–°–¢ _prepareHealthData ===");
  if (sheet && sheet._prepareHealthData) {
    const testContext = { system: actor.system };
    sheet._prepareHealthData(testContext);
    console.log("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç _prepareHealthData:");
    console.log("  - hierarchicalBodyParts:", testContext.hierarchicalBodyParts?.length || 0);
    console.log("  - injuredParts:", Object.keys(testContext.injuredParts || {}).length);
  }
  
  // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  console.log("\n=== 6. –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===");
  console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏...");
  
  // –í—ã–∑—ã–≤–∞–µ–º prepareDerivedData
  actor.prepareDerivedData().then(() => {
    console.log("‚úÖ prepareDerivedData –≤—ã–ø–æ–ª–Ω–µ–Ω");
    console.log("üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ prepareDerivedData:");
    console.log("  - anatomy.bodyParts:", Object.keys(actor.system.anatomy?.bodyParts || {}).length);
    console.log("  - health.bodyParts:", Object.keys(actor.system.health?.bodyParts || {}).length);
  }).catch(err => {
    console.error("‚ùå –û—à–∏–±–∫–∞ prepareDerivedData:", err);
  });
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
function testClearAnatomy() {
  console.log("\n=== –¢–ï–°–¢ –û–ß–ò–°–¢–ö–ò –ê–ù–ê–¢–û–ú–ò–ò ===");
  
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor || actor.type !== 'character') {
    console.error("‚ùå –ù–µ—Ç –∞–∫—Ç—ë—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }
  
  console.log("üßπ –û—á–∏—â–∞–µ–º –∞–Ω–∞—Ç–æ–º–∏—é...");
  
  actor.update({
    'system.anatomy.type': null,
    'system.anatomy.bodyParts': {},
    'system.health.bodyParts': {},
    'system.health.totalHealth': { current: 0, max: 0, percentage: 100 }
  }).then(() => {
    console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
    setTimeout(() => {
      console.log("üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:");
      console.log("  - anatomy.type:", actor.system.anatomy?.type);
      console.log("  - anatomy.bodyParts:", Object.keys(actor.system.anatomy?.bodyParts || {}).length);
      console.log("  - health.bodyParts:", Object.keys(actor.system.health?.bodyParts || {}).length);
    }, 500);
  }).catch(err => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", err);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–Ω–∞—Ç–æ–º–∏–∏
function testAnatomyChange() {
  console.log("\n=== –¢–ï–°–¢ –°–ú–ï–ù–´ –ê–ù–ê–¢–û–ú–ò–ò ===");
  
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor || actor.type !== 'character') {
    console.error("‚ùå –ù–µ—Ç –∞–∫—Ç—ë—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }
  
  console.log("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û:");
  console.log("  - –¢–∏–ø:", actor.system.anatomy?.type);
  console.log("  - –ß–∞—Å—Ç–∏ (anatomy):", Object.keys(actor.system.anatomy?.bodyParts || {}).length);
  console.log("  - –ß–∞—Å—Ç–∏ (health):", Object.keys(actor.system.health?.bodyParts || {}).length);
  
  const currentType = actor.system.anatomy?.type;
  const newType = currentType === 'humanoid' ? 'quadruped' : 'humanoid';
  
  console.log(`üîÑ –ú–µ–Ω—è–µ–º –∞–Ω–∞—Ç–æ–º–∏—é: ${currentType || 'none'} ‚Üí ${newType}`);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ ActorSheet
  const sheet = actor.sheet;
  if (sheet && sheet._performAnatomyChange) {
    sheet._performAnatomyChange(newType).then(() => {
      setTimeout(() => {
        console.log("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï:");
        console.log("  - –¢–∏–ø:", actor.system.anatomy?.type);
        console.log("  - –ß–∞—Å—Ç–∏ (anatomy):", Object.keys(actor.system.anatomy?.bodyParts || {}).length);
        console.log("  - –ß–∞—Å—Ç–∏ (health):", Object.keys(actor.system.health?.bodyParts || {}).length);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        if (currentType) {
          setTimeout(() => {
            console.log("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ...");
            sheet._performAnatomyChange(currentType);
          }, 1000);
        }
      }, 1000);
    });
  } else {
    console.error("‚ùå –ú–µ—Ç–æ–¥ _performAnatomyChange –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseActorAnatomy();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testClearAnatomy = testClearAnatomy;
window.testAnatomyChange = testAnatomyChange;
window.diagnoseActorAnatomy = diagnoseActorAnatomy;

console.log("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:");
console.log("  - testClearAnatomy() - —Ç–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞—Ç–æ–º–∏–∏");
console.log("  - testAnatomyChange() - —Ç–µ—Å—Ç —Å–º–µ–Ω—ã –∞–Ω–∞—Ç–æ–º–∏–∏");
console.log("  - diagnoseActorAnatomy() - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞");