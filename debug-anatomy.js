// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞–Ω–∞—Ç–æ–º–∏–µ–π
// –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ FoundryVTT

function debugAnatomySystem() {
  console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–ê–¢–û–ú–ò–ò ===");
  
  const manager = game.spaceholder?.anatomyManager;
  if (!manager) {
    console.error("‚ùå AnatomyManager –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }
  
  console.log("‚úÖ AnatomyManager –Ω–∞–π–¥–µ–Ω");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞—Ç–æ–º–∏–∏
  const available = manager.getAvailableAnatomies();
  console.log("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞—Ç–æ–º–∏–∏:", Object.keys(available));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—ë—Ä–∞
  const actor = canvas.tokens.controlled[0]?.actor || game.actors.contents[0];
  if (!actor || actor.type !== 'character') {
    console.error("‚ùå –ù–µ—Ç –∞–∫—Ç—ë—Ä–∞-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }
  
  console.log(`üé≠ –ê–∫—Ç—ë—Ä: ${actor.name}`);
  console.log(`üìç –¢–µ–∫—É—â–∏–π —Ç–∏–ø –∞–Ω–∞—Ç–æ–º–∏–∏: ${actor.system.anatomy?.type || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}`);
  
  const bodyParts = actor.system.anatomy?.bodyParts;
  if (bodyParts) {
    console.log(`ü¶¥ –ß–∞—Å—Ç–µ–π —Ç–µ–ª–∞: ${Object.keys(bodyParts).length}`);
    console.log("üìã –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞:");
    for (let [id, part] of Object.entries(bodyParts)) {
      console.log(`  - ${part.name} (${id}): ${part.currentHp}/${part.maxHp} HP`);
    }
  } else {
    console.warn("‚ö†Ô∏è –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É –∞–Ω–∞—Ç–æ–º–∏–∏
  console.log("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É –∞–Ω–∞—Ç–æ–º–∏–∏...");
  const currentType = actor.system.anatomy?.type || 'humanoid';
  const newType = currentType === 'humanoid' ? 'quadruped' : 'humanoid';
  
  console.log(`üîÑ –ú–µ–Ω—è–µ–º ${currentType} -> ${newType}`);
  
  actor.changeAnatomyType(newType).then(success => {
    if (success) {
      console.log("‚úÖ –°–º–µ–Ω–∞ –∞–Ω–∞—Ç–æ–º–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
      setTimeout(() => {
        const newBodyParts = actor.system.anatomy?.bodyParts;
        console.log(`ü¶¥ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞: ${Object.keys(newBodyParts || {}).length}`);
        console.log("üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞:");
        for (let [id, part] of Object.entries(newBodyParts || {})) {
          console.log(`  - ${part.name} (${id}): ${part.currentHp}/${part.maxHp} HP`);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        actor.changeAnatomyType(currentType).then(() => {
          console.log("üîÑ –í–µ—Ä–Ω—É–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ –∫ " + currentType);
        });
      }, 500);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∞–Ω–∞—Ç–æ–º–∏–∏");
    }
  });
}

debugAnatomySystem();