// –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ UI
// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

(function() {
    const actor = canvas.tokens.controlled[0]?.actor || game.user.character;
    
    if (!actor) {
        console.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
        return;
    }
    
    console.log(`=== –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¥–ª—è ${actor.name} ===`);
    
    function deepInspect() {
        console.log("\n--- –ì–õ–£–ë–û–ö–ê–Ø –ò–ù–°–ü–ï–ö–¶–ò–Ø –î–ê–ù–ù–´–• ---");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        console.log("1. actor.system.health.totalHealth:", actor.system.health?.totalHealth);
        console.log("2. actor._source.system.health.totalHealth:", actor._source?.system?.health?.totalHealth);
        console.log("3. actor.data?.system?.health?.totalHealth:", actor.data?.system?.health?.totalHealth);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
        const anatomyParts = actor.system.anatomy?.bodyParts;
        const healthParts = actor.system.health?.bodyParts;
        
        if (anatomyParts) {
            console.log(`4. anatomy.bodyParts: ${Object.keys(anatomyParts).length} —á–∞—Å—Ç–µ–π`);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏
            let count = 0;
            for (let [id, part] of Object.entries(anatomyParts)) {
                if (count++ < 3) {
                    console.log(`   ${id}: ${part.currentHp}/${part.maxHp}`);
                }
            }
        }
        
        if (healthParts && healthParts !== anatomyParts) {
            console.log(`5. health.bodyParts: ${Object.keys(healthParts).length} —á–∞—Å—Ç–µ–π`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (actor.sheet) {
            console.log("6. actor.sheet —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", !!actor.sheet);
            console.log("7. actor.sheet.rendered:", actor.sheet.rendered);
            console.log("8. actor.sheet._state:", actor.sheet._state);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫—Ç–µ—Ä–∞
    function monitorActorUpdates() {
        console.log("\n--- –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ---");
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–∞
        Hooks.once('updateActor', (document, data, options, userId) => {
            if (document.id === actor.id) {
                console.log("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–ö–¢–ï–†–ê –û–ë–ù–ê–†–£–ñ–ï–ù–û:");
                console.log("  - document:", document.name);
                console.log("  - data:", data);
                console.log("  - options:", options);
                deepInspect();
            }
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –ª–∏—Å—Ç–∞
        Hooks.once('renderActorSheet', (app, html, data) => {
            if (app.actor.id === actor.id) {
                console.log("üé® –ü–ï–†–ï–†–ò–°–û–í–ö–ê –õ–ò–°–¢–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê:");
                console.log("  - app:", app);
                console.log("  - data.system.health.totalHealth:", data.system?.health?.totalHealth);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ HTML
                const healthNumbers = html.find('.health-numbers');
                if (healthNumbers.length > 0) {
                    console.log("  - HTML .health-numbers –Ω–∞–π–¥–µ–Ω–æ:", healthNumbers.length);
                    healthNumbers.each(function(i, elem) {
                        console.log(`    [${i}]: "${$(elem).text()}"`);
                    });
                } else {
                    console.log("  - HTML .health-numbers –ù–ï –Ω–∞–π–¥–µ–Ω–æ!");
                }
            }
        });
        
        console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    }
    
    window.fullTest = async (damage = 5) => {
        console.log(`\n=== –ü–û–õ–ù–´–ô –¢–ï–°–¢ –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú (—É—Ä–æ–Ω: ${damage}) ===`);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitorActorUpdates();
        
        console.log("–°–û–°–¢–û–Ø–ù–ò–ï –î–û:");
        deepInspect();
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        console.log("\nüî• –ù–ê–ù–ï–°–ï–ù–ò–ï –£–†–û–ù–ê...");
        const result = await actor.performHit(damage);
        console.log(`–ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ ${result.targetPart} –Ω–∞ ${damage} —É—Ä–æ–Ω–∞`);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 300));
        
        console.log("\n–°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï:");
        deepInspect();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        console.log("\nüîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–†–ò–°–û–í–ö–ê...");
        if (actor.sheet?.rendered) {
            actor.sheet.render(true);
        }
        
        await new Promise(resolve => setTimeout(resolve, 300));
        
        console.log("\n–§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:");
        deepInspect();
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    window.directUpdate = async (damage = 5) => {
        console.log(`\n=== –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• (—É—Ä–æ–Ω: ${damage}) ===`);
        
        const bodyParts = actor.system.anatomy?.bodyParts;
        if (!bodyParts) {
            console.log("–ù–µ—Ç —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞!");
            return;
        }
        
        // –ù–∞–π–¥–µ–º –ª—é–±—É—é —á–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
        const partId = Object.keys(bodyParts)[0];
        const part = bodyParts[partId];
        
        console.log(`–ü—Ä—è–º–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ ${damage} —É—Ä–æ–Ω–∞ –≤ ${partId}`);
        console.log(`–ë—ã–ª–æ: ${part.currentHp}/${part.maxHp}`);
        
        const newHp = Math.max(0, part.currentHp - damage);
        
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ actor.update
        await actor.update({
            [`system.anatomy.bodyParts.${partId}.currentHp`]: newHp,
            [`system.health.bodyParts.${partId}.currentHp`]: newHp
        });
        
        console.log(`–°—Ç–∞–ª–æ: ${newHp}/${part.maxHp}`);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        if (actor.sheet?.rendered) {
            actor.sheet.render(true);
        }
    };
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è
    deepInspect();
    
    console.log("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
    console.log("fullTest(10) - –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º");
    console.log("directUpdate(5) - –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
    
})();