// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤ Foundry VTT
// –û—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

console.log("üîß Correct native socket implementation...");

// –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π socket manager
class FoundryNativeSocketManager {
  constructor(namespace) {
    this.namespace = namespace;
    this.handlers = new Map();
    this.initialized = false;
  }
  
  initialize() {
    if (this.initialized) return;
    
    console.log("üîå Initializing native socket manager for namespace:", this.namespace);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω
    game.socket.on(this.namespace, (data) => {
      console.log(`üì® Socket event received on ${this.namespace}:`, data);
      this._handleMessage(data);
    });
    
    this.initialized = true;
    console.log("‚úÖ Native socket manager initialized");
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  on(messageType, handler) {
    console.log(`üìù Registering handler for: ${messageType}`);
    this.handlers.set(messageType, handler);
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  emit(messageType, data) {
    const message = {
      type: messageType,
      data: data,
      sender: game.user.id,
      timestamp: Date.now()
    };
    
    console.log(`üì§ Emitting message type ${messageType} to namespace ${this.namespace}:`, message);
    
    // –í Foundry VTT –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± - —ç—Ç–æ emit —Å –¥–∞–Ω–Ω—ã–º–∏
    game.socket.emit(this.namespace, message);
  }
  
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  _handleMessage(message) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.sender === game.user.id) {
      console.log("üò¥ Ignoring own message");
      return;
    }
    
    console.log(`üéØ Processing message type: ${message.type} from user: ${message.sender}`);
    
    const handler = this.handlers.get(message.type);
    if (handler) {
      try {
        handler(message.data, message.sender);
      } catch (error) {
        console.error("‚ùå Error in message handler:", error);
      }
    } else {
      console.warn("‚ö†Ô∏è No handler registered for message type:", message.type);
    }
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testSocketManager = new FoundryNativeSocketManager("spaceholder.test");

// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏
window.setupSocketTest = function() {
  console.log("üß™ Setting up socket test...");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
  testSocketManager.initialize();
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  testSocketManager.on("ping", (data, senderId) => {
    console.log(`üèì Received PING from ${senderId}:`, data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PONG –æ–±—Ä–∞—Ç–Ω–æ
    testSocketManager.emit("pong", {
      message: `PONG from ${game.user.name}`,
      originalMessage: data.message
    });
  });
  
  testSocketManager.on("pong", (data, senderId) => {
    console.log(`üèì Received PONG from ${senderId}:`, data);
  });
  
  testSocketManager.on("shot", (data, senderId) => {
    console.log(`üéØ Received SHOT from ${senderId}:`, data);
    
    // –ó–¥–µ—Å—å –º—ã –±—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    if (data.tokenId) {
      const token = canvas.tokens.get(data.tokenId);
      if (token) {
        console.log(`‚úÖ Found token ${token.name} for shot visualization`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        ChatMessage.create({
          content: `üåê ${token.name} —Å—Ç—Ä–µ–ª—è–µ—Ç (—á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–∫–µ—Ç—ã)!`,
          speaker: { alias: 'Socket Test' }
        });
      }
    }
  });
  
  console.log("‚úÖ Socket test setup complete");
};

window.sendPing = function() {
  console.log("üèì Sending PING...");
  testSocketManager.emit("ping", {
    message: `Hello from ${game.user.name}!`,
    timestamp: Date.now()
  });
};

window.sendTestShot = function() {
  console.log("üéØ Sending test shot...");
  
  const testToken = canvas.tokens.placeables[0];
  if (!testToken) {
    console.error("‚ùå No tokens available for test");
    return;
  }
  
  testSocketManager.emit("shot", {
    tokenId: testToken.id,
    direction: 45,
    weapon: "Test Socket Weapon",
    timestamp: Date.now()
  });
};

console.log("üîß Correct socket implementation loaded!");
console.log("Commands:");
console.log("  setupSocketTest() - initialize the socket test");
console.log("  sendPing() - send a ping message");
console.log("  sendTestShot() - send a test shot");
console.log("");
console.log("üìã Test procedure:");
console.log("  1. Run setupSocketTest() on ALL clients");
console.log("  2. Run sendPing() or sendTestShot() on one client");
console.log("  3. Check console on other clients");