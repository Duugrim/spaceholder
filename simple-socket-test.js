// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

console.log("üîå Simple socket test for SpaceHolder system...");

window.simpleSocketTest = function() {
  console.log("=== SIMPLE SOCKET TEST ===");
  
  const socketName = 'system.spaceholder.test';
  
  // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  console.log("1. Registering socket handler...");
  
  const handler = (data, senderId) => {
    console.log("‚úÖ Received socket message:", data, "from user:", senderId);
    
    if (data.type === 'PING') {
      console.log("üèì Got PING, sending PONG...");
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      game.socket.emit(socketName, {
        type: 'PONG',
        originalSender: data.sender,
        timestamp: Date.now()
      });
    }
    
    if (data.type === 'PONG') {
      console.log("üèì Got PONG response!");
    }
  };
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  game.socket.on(socketName, handler);
  
  // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  console.log("2. Sending PING message...");
  
  game.socket.emit(socketName, {
    type: 'PING',
    sender: game.user.name,
    message: 'Hello from SpaceHolder!',
    timestamp: Date.now()
  });
  
  // 3. –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log("3. Cleaning up socket handler...");
    game.socket.off(socketName, handler);
    console.log("‚úÖ Socket test completed");
  }, 10000);
  
  console.log("üîå Test initiated. Check console for results...");
};

window.testSpaceholderSocket = function() {
  console.log("=== SPACEHOLDER SOCKET TEST ===");
  
  if (!game.spaceholder?.aimingSystem?.socketManager) {
    console.error("‚ùå SpaceHolder socket manager not available");
    return;
  }
  
  const socketManager = game.spaceholder.aimingSystem.socketManager;
  console.log("Socket name:", socketManager.socketName);
  
  // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à SocketManager
  console.log("Sending test message through SocketManager...");
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–∞–Ω–Ω—ã–µ
  const testToken = canvas.tokens.placeables[0];
  if (!testToken) {
    console.error("‚ùå No tokens on scene for testing");
    return;
  }
  
  const testShotData = {
    tokenId: testToken.id,
    direction: 0,
    startPosition: testToken.center,
    timestamp: Date.now(),
    weaponName: 'Test Socket Weapon'
  };
  
  console.log("Broadcasting test shot:", testShotData);
  socketManager.broadcastFireShot(testShotData);
  
  console.log("‚úÖ SpaceHolder socket test message sent");
};

console.log("üîå Socket tests loaded:");
console.log("  simpleSocketTest() - basic socket functionality");
console.log("  testSpaceholderSocket() - SpaceHolder socket manager");