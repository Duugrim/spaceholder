/**
 * ‚ö†Ô∏è LEGACY CODE - –û–¢–ö–õ–Æ–ß–ï–ù ‚ö†Ô∏è
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–µ–π socket-logger.
 * –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
 * –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
 * –î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: 2025-10-28
 */

// Socket Logger for SpaceHolder - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ socket-–ª–æ–≥–æ–≤
// –°–æ–±–∏—Ä–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ socket-—Å–æ–±—ã—Ç–∏–π –≤ —Å–≤–æ–¥–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –ø–æ –≤—ã—Å—Ç—Ä–µ–ª–∞–º

export class SocketLogger {
  constructor() {
    this.isEnabled = true;
    this.activeShotSessions = new Map(); // tokenId -> session data
  }

  /**
   * –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
   */
  startRemoteShot(tokenId, tokenName, userId, userName, direction, weaponName) {
    if (!this.isEnabled) return;
    
    const sessionData = {
      tokenId,
      tokenName,
      userId,
      userName,
      direction: Math.round(direction),
      weaponName,
      startTime: Date.now(),
      segments: 0,
      hits: [],
      events: []
    };

    this.activeShotSessions.set(tokenId, sessionData);
    
    console.log(`üåê Remote shot started: ${tokenName} (${userName}) firing ${weaponName} at ${Math.round(direction)}¬∞`);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  addSegment(tokenId, segmentIndex, isRicochet = false) {
    if (!this.isEnabled) return;
    
    const session = this.activeShotSessions.get(tokenId);
    if (session) {
      session.segments++;
      if (isRicochet) {
        session.events.push({ type: 'ricochet', index: segmentIndex });
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
   */
  addHit(tokenId, hitType, distance, targetId = null) {
    if (!this.isEnabled) return;
    
    const session = this.activeShotSessions.get(tokenId);
    if (session) {
      session.hits.push({
        type: hitType,
        distance: Math.round(distance * 100) / 100,
        targetId
      });
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
   */
  finishRemoteShot(tokenId) {
    if (!this.isEnabled) return;
    
    const session = this.activeShotSessions.get(tokenId);
    if (!session) return;

    const duration = Date.now() - session.startTime;
    const ricochets = session.events.filter(e => e.type === 'ricochet').length;
    
    // –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç
    let report = `üåê Remote shot complete: ${session.tokenName} ‚Üí `;
    report += `${session.segments} segments`;
    
    if (session.hits.length > 0) {
      const hitTypes = [...new Set(session.hits.map(h => h.type))];
      report += `, hits: ${hitTypes.join(', ')}`;
    } else {
      report += `, miss`;
    }
    
    if (ricochets > 0) {
      report += `, ${ricochets} ricochets`;
    }
    
    report += ` (${duration}ms)`;
    
    console.log(report);
    
    // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    this.activeShotSessions.delete(tokenId);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π socket-event (–∫—Ä–∞—Ç–∫–∏–π)
   */
  logOutgoing(eventType, tokenName, details = '') {
    if (!this.isEnabled) return;
    
    const shortType = eventType.replace('aimingSystem.', '');
    console.log(`üì§ Socket out: ${shortType} from ${tokenName} ${details}`);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π socket-event (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)
   */
  logIncoming(eventType, userId, userName, data) {
    if (!this.isEnabled) return;
    
    const shortType = eventType.replace('aimingSystem.', '');
    
    switch (eventType) {
      case 'aimingSystem.fireShot':
        // –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ startRemoteShot
        break;
      case 'aimingSystem.shotSegment':
        // –¢–∏—Ö–∏–π - –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π
        break;
      case 'aimingSystem.shotHit':
        // –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ addHit
        break;
      case 'aimingSystem.shotComplete':
        // –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ finishRemoteShot
        break;
      default:
        console.log(`üì® Socket in: ${shortType} from ${userName}`);
    }
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  setEnabled(enabled) {
    this.isEnabled = enabled;
    console.log(`üì° Socket logging ${enabled ? 'enabled' : 'disabled'}`);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
   */
  clearAllSessions() {
    const count = this.activeShotSessions.size;
    this.activeShotSessions.clear();
    if (count > 0) {
      console.log(`üßπ Cleared ${count} active socket sessions`);
    }
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const socketLogger = new SocketLogger();