// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã draw-manager
// –°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫—É

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ draw-manager —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function testDrawManager() {
  console.log('üé® Starting draw-manager test...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ draw-manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found! Make sure the system is loaded.');
    ui.notifications.error('DrawManager –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
    return;
  }
  
  // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ draw-input-example.md
  const testShotResult = {
    shotPaths: [
      {
        id: 0,
        type: "line",
        start: { x: 100, y: 300 },
        end: { x: 150, y: 290 }
      },
      {
        id: 1,
        type: "line", 
        start: { x: 150, y: 290 },
        end: { x: 200, y: 270 }
      },
      {
        id: 2,
        type: "line",
        start: { x: 200, y: 270 },
        end: { x: 250, y: 240 }
      },
      {
        id: 3,
        type: "circle",
        range: 50,
        start: { x: 250, y: 240 },
        end: { x: 250, y: 240 }
      }
    ],
    shotHits: [
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º shotHits –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏
    ]
  };
  
  console.log('üéØ Test data created:', testShotResult);
  
  try {
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É
    game.spaceholder.drawManager.drawShot(testShotResult);
    console.log('‚úÖ DrawManager.drawShot() called successfully!');
    ui.notifications.info('–¢–µ—Å—Ç draw-manager –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ canvas –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.');
  } catch (error) {
    console.error('‚ùå Error calling drawShot:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ drawShot: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function testDrawManagerAdvanced() {
  console.log('üé® Starting advanced draw-manager test...');
  
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found!');
    return;
  }
  
  // –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ç–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫—Ä—É–≥–∞–º–∏ –∏ –ª–∏–Ω–∏—è–º–∏
  const advancedShotResult = {
    shotPaths: [
      // –ù–∞—á–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
      {
        id: 0,
        type: "line",
        start: { x: 300, y: 400 },
        end: { x: 400, y: 350 }
      },
      // –ü–µ—Ä–≤—ã–π –∫—Ä—É–≥
      {
        id: 1,
        type: "circle",
        range: 30,
        start: { x: 400, y: 350 },
        end: { x: 400, y: 350 }
      },
      // –ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∞—è –ª–∏–Ω–∏—è
      {
        id: 2,
        type: "line",
        start: { x: 400, y: 350 },
        end: { x: 500, y: 300 }
      },
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–ª—å—à–æ–π –∫—Ä—É–≥
      {
        id: 3,
        type: "circle",
        range: 80,
        start: { x: 500, y: 300 },
        end: { x: 500, y: 300 }
      }
    ]
  };
  
  try {
    game.spaceholder.drawManager.drawShot(advancedShotResult);
    console.log('‚úÖ Advanced DrawManager test completed!');
    ui.notifications.info('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç draw-manager –≤—ã–ø–æ–ª–Ω–µ–Ω!');
  } catch (error) {
    console.error('‚ùå Advanced test error:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function clearDrawManager() {
  console.log('üßπ Clearing draw-manager...');
  
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found!');
    return;
  }
  
  try {
    game.spaceholder.drawManager.clearAll();
    console.log('‚úÖ DrawManager cleared successfully!');
    ui.notifications.info('Draw-manager –æ—á–∏—â–µ–Ω!');
  } catch (error) {
    console.error('‚ùå Error clearing DrawManager:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç –∫–æ–Ω—É—Å–∞
 */
function testDrawManagerCone() {
  console.log('üéÜ Testing draw-manager with cone...');
  
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found!');
    return;
  }
  
  const coneShotResult = {
    shotPaths: [
      {
        id: 0,
        type: "line",
        start: { x: 400, y: 500 },
        end: { x: 450, y: 450 }
      },
      {
        id: 1,
        type: "cone",
        range: 100,
        angle: 30,
        direction: 0, // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–æ—Å—Ç–æ–∫
        start: { x: 450, y: 450 },
        end: { x: 450, y: 450 }
      }
    ]
  };
  
  try {
    game.spaceholder.drawManager.drawShot(coneShotResult);
    console.log('‚úÖ Cone test completed!');
    ui.notifications.info('–¢–µ—Å—Ç –∫–æ–Ω—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
  } catch (error) {
    console.error('‚ùå Cone test error:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—É—Å–∞: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–Ω—É—Å–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */
function testDrawManagerMultipleCones() {
  console.log('üéÜ Testing multiple cones...');
  
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found!');
    return;
  }
  
  const multiConeShotResult = {
    shotPaths: [
      // –ö–æ–Ω—É—Å –Ω–∞ —Å–µ–≤–µ—Ä
      {
        id: 0,
        type: "cone",
        range: 80,
        angle: 45,
        direction: 270, // –°–µ–≤–µ—Ä
        start: { x: 300, y: 300 },
        end: { x: 300, y: 300 }
      },
      // –ö–æ–Ω—É—Å –Ω–∞ –≤–æ—Å—Ç–æ–∫
      {
        id: 1,
        type: "cone",
        range: 60,
        angle: 60,
        direction: 0, // –í–æ—Å—Ç–æ–∫
        start: { x: 500, y: 300 },
        end: { x: 500, y: 300 }
      },
      // –ö–æ–Ω—É—Å –Ω–∞ —é–≥
      {
        id: 2,
        type: "cone",
        range: 70,
        angle: 90,
        direction: 90, // –Æ–≥
        start: { x: 400, y: 500 },
        end: { x: 400, y: 500 }
      }
    ]
  };
  
  try {
    game.spaceholder.drawManager.drawShot(multiConeShotResult);
    console.log('‚úÖ Multiple cones test completed!');
    ui.notifications.info('–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ–Ω—É—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
  } catch (error) {
    console.error('‚ùå Multiple cones test error:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ–Ω—É—Å–æ–≤: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç —É—Å–µ—á—ë–Ω–Ω—ã—Ö –∫–æ–Ω—É—Å–æ–≤
 */
function testDrawManagerCutCones() {
  console.log('üî™ Testing cut cones...');
  
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found!');
    return;
  }
  
  const cutConeShotResult = {
    shotPaths: [
      // –û–±—ã—á–Ω—ã–π –∫–æ–Ω—É—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      {
        id: 0,
        type: "cone",
        range: 100,
        angle: 60,
        direction: 0, // –í–æ—Å—Ç–æ–∫
        start: { x: 200, y: 300 },
        end: { x: 200, y: 300 }
        // cut –Ω–µ —É–∫–∞–∑–∞–Ω = –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—É—Å
      },
      // –£—Å–µ—á—ë–Ω–Ω—ã–π –∫–æ–Ω—É—Å —Å –º–∞–ª—ã–º —É—Å–µ—á–µ–Ω–∏–µ–º
      {
        id: 1,
        type: "cone",
        range: 100,
        angle: 60,
        direction: 90, // –Æ–≥
        cut: 20,
        start: { x: 400, y: 300 },
        end: { x: 400, y: 300 }
      },
      // –£—Å–µ—á—ë–Ω–Ω—ã–π –∫–æ–Ω—É—Å —Å –±–æ–ª—å—à–∏–º —É—Å–µ—á–µ–Ω–∏–µ–º
      {
        id: 2,
        type: "cone",
        range: 120,
        angle: 45,
        direction: 180, // –ó–∞–ø–∞–¥
        cut: 50,
        start: { x: 600, y: 300 },
        end: { x: 600, y: 300 }
      },
      // –£–∑–∫–∏–π —É—Å–µ—á—ë–Ω–Ω—ã–π –∫–æ–Ω—É—Å
      {
        id: 3,
        type: "cone",
        range: 80,
        angle: 30,
        direction: 270, // –°–µ–≤–µ—Ä
        cut: 30,
        start: { x: 400, y: 500 },
        end: { x: 400, y: 500 }
      }
    ]
  };
  
  try {
    game.spaceholder.drawManager.drawShot(cutConeShotResult);
    console.log('‚úÖ Cut cones test completed!');
    ui.notifications.info('–¢–µ—Å—Ç —É—Å–µ—á—ë–Ω–Ω—ã—Ö –∫–æ–Ω—É—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
  } catch (error) {
    console.error('‚ùå Cut cones test error:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É—Å–µ—á—ë–Ω–Ω—ã—Ö –∫–æ–Ω—É—Å–æ–≤: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏
 */
function testDrawManagerCustomStyles() {
  console.log('üé® Testing draw-manager with custom styles...');
  
  if (!game.spaceholder?.drawManager) {
    console.error('‚ùå DrawManager not found!');
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
  const customStyles = {
    line: {
      color: 0x00FF00,  // –ó–µ–ª—ë–Ω—ã–π
      alpha: 0.8,
      width: 6
    },
    circle: {
      color: 0x0088FF,  // –°–∏–Ω–∏–π
      alpha: 0.7,
      lineWidth: 4,
      fillAlpha: 0.3
    },
    cone: {
      color: 0xFF00FF,  // –ú–∞–≥–µ–Ω—Ç–∞
      alpha: 0.8,
      lineWidth: 3,
      fillAlpha: 0.25
    }
  };
  
  game.spaceholder.drawManager.setStyles(customStyles);
  
  const styledShotResult = {
    shotPaths: [
      {
        id: 0,
        type: "line",
        start: { x: 600, y: 200 },
        end: { x: 700, y: 180 }
      },
      {
        id: 1,
        type: "circle",
        range: 60,
        start: { x: 700, y: 180 },
        end: { x: 700, y: 180 }
      },
      {
        id: 2,
        type: "cone",
        range: 80,
        angle: 45,
        direction: 135, // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —é–≥–æ-–∑–∞–ø–∞–¥
        start: { x: 750, y: 200 },
        end: { x: 750, y: 200 }
      }
    ]
  };
  
  try {
    game.spaceholder.drawManager.drawShot(styledShotResult);
    console.log('‚úÖ Custom styles test completed!');
    ui.notifications.info('–¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
  } catch (error) {
    console.error('‚ùå Custom styles test error:', error);
    ui.notifications.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç–∏–ª–µ–π: ${error.message}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.testDrawManager = testDrawManager;
window.testDrawManagerAdvanced = testDrawManagerAdvanced;
window.testDrawManagerCone = testDrawManagerCone;
window.testDrawManagerMultipleCones = testDrawManagerMultipleCones;
window.testDrawManagerCutCones = testDrawManagerCutCones;
window.testDrawManagerCustomStyles = testDrawManagerCustomStyles;
window.clearDrawManager = clearDrawManager;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
Hooks.once('ready', () => {
  if (game.settings.get('core', 'noCanvas')) return;
  
  console.log('üé® Draw-manager test functions loaded!');
  console.log('üìù Available test functions:');
  console.log('  - testDrawManager() - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç');
  console.log('  - testDrawManagerAdvanced() - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç');
  console.log('  - testDrawManagerCone() - —Ç–µ—Å—Ç –∫–æ–Ω—É—Å–∞');
  console.log('  - testDrawManagerMultipleCones() - —Ç–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ–Ω—É—Å–æ–≤');
  console.log('  - testDrawManagerCutCones() - —Ç–µ—Å—Ç —É—Å–µ—á—ë–Ω–Ω—ã—Ö –∫–æ–Ω—É—Å–æ–≤');
  console.log('  - testDrawManagerCustomStyles() - —Ç–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏');
  console.log('  - clearDrawManager() - –æ—á–∏—Å—Ç–∫–∞');
  
  // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
  // setTimeout(() => {
  //   testDrawManager();
  // }, 2000);
});

export { testDrawManager, testDrawManagerAdvanced, testDrawManagerCone, testDrawManagerMultipleCones, testDrawManagerCutCones, testDrawManagerCustomStyles, clearDrawManager };
