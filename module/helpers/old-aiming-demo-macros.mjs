/**
 * ‚ö†Ô∏è LEGACY CODE - –û–¢–ö–õ–Æ–ß–ï–ù ‚ö†Ô∏è
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–µ–π –¥–µ–º–æ-–º–∞–∫—Ä–æ—Å–æ–≤ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è.
 * –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
 * –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
 * –î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: 2025-10-28
 */

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è SpaceHolder
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π scope –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

/**
 * –ù–∞—á–∞—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
 */
window.startAiming = function() {
  const controlled = canvas.tokens.controlled;
  
  if (controlled.length === 0) {
    ui.notifications.warn('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è');
    return false;
  }
  
  const token = controlled[0];
  const aimingSystem = game.spaceholder?.aimingSystem;
  
  if (!aimingSystem) {
    ui.notifications.error('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return false;
  }
  
  const success = aimingSystem.startAiming(token);
  
  if (success) {
    ui.notifications.info(`–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ${token.name}`);
    console.log(`üéØ Aiming started for token: ${token.name} (ID: ${token.id})`);
  }
  
  return success;
};

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
 */
window.stopAiming = function() {
  const aimingSystem = game.spaceholder?.aimingSystem;
  
  if (!aimingSystem) {
    ui.notifications.error('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return false;
  }
  
  if (!aimingSystem.isAiming) {
    ui.notifications.warn('–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ');
    return false;
  }
  
  aimingSystem.stopAiming();
  ui.notifications.info('–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  console.log('üõë Aiming stopped');
  
  return true;
};

/**
 * –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
 */
window.fireShot = function() {
  const aimingSystem = game.spaceholder?.aimingSystem;
  
  if (!aimingSystem) {
    ui.notifications.error('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return false;
  }
  
  if (!aimingSystem.isAiming) {
    ui.notifications.warn('–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ');
    return false;
  }
  
  console.log('üî• Manual fire triggered');
  aimingSystem.fire();
  
  return true;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
 */
window.getAimingInfo = function() {
  const aimingSystem = game.spaceholder?.aimingSystem;
  
  if (!aimingSystem) {
    console.error('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return null;
  }
  
  const info = {
    isAiming: aimingSystem.isAiming,
    aimingToken: aimingSystem.aimingToken?.name || null,
    currentDirection: Math.round(aimingSystem.currentAimDirection),
    config: {
      maxRayDistance: aimingSystem.config.maxRayDistance,
      aimingSensitivity: aimingSystem.config.aimingSensitivity,
      showAimingReticle: aimingSystem.config.showAimingReticle,
    }
  };
  
  console.log('üìä Aiming System Status:', info);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —á–∞—Ç–µ
  const content = `
    <div style="background: #f8f8f8; padding: 12px; border-radius: 6px; border-left: 4px solid #00aa00;">
      <h3 style="margin: 0 0 8px 0; color: #333;">üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è</h3>
      <p><strong>–ê–∫—Ç–∏–≤–Ω–æ:</strong> ${info.isAiming ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
      ${info.aimingToken ? `<p><strong>–¢–æ–∫–µ–Ω:</strong> ${info.aimingToken}</p>` : ''}
      ${info.isAiming ? `<p><strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> ${info.currentDirection}¬∞</p>` : ''}
      <details style="margin-top: 8px;">
        <summary style="cursor: pointer; color: #666;">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</summary>
        <ul style="margin: 4px 0 0 20px; font-size: 0.9em;">
          <li>–î–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞: ${info.config.maxRayDistance}px</li>
          <li>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${info.config.aimingSensitivity}</li>
          <li>–ü—Ä–∏—Ü–µ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞: ${info.config.showAimingReticle ? '–í–∫–ª' : '–í—ã–∫–ª'}</li>
        </ul>
      </details>
    </div>
  `;
  
  ChatMessage.create({
    content: content,
    speaker: { alias: "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è" }
  });
  
  return info;
};

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ —Å—Ç–µ–Ω–∞–º–∏
 */
window.createAimingTestScene = async function() {
  if (!game.user.isGM) {
    ui.notifications.error('–¢–æ–ª—å–∫–æ GM –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É');
    return false;
  }
  
  ui.notifications.info('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
    const scene = await Scene.create({
      name: "–¢–µ—Å—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è",
      width: 2000,
      height: 1500,
      grid: {
        type: 1,
        size: 100
      },
      backgroundColor: "#999999"
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    await scene.activate();
    
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ö–æ–ª—Å—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokens = [
      {
        name: "–°—Ç—Ä–µ–ª–æ–∫",
        x: 300,
        y: 300,
        texture: {
          src: "icons/svg/mystery-man.svg"
        },
        width: 100,
        height: 100,
      },
      {
        name: "–¶–µ–ª—å 1",
        x: 800,
        y: 300,
        texture: {
          src: "icons/svg/target.svg"
        },
        width: 100,
        height: 100,
      },
      {
        name: "–¶–µ–ª—å 2",
        x: 1200,
        y: 600,
        texture: {
          src: "icons/svg/target.svg"
        },
        width: 100,
        height: 100,
      }
    ];
    
    await scene.createEmbeddedDocuments("Token", tokens);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–Ω—ã
    const walls = [
      {
        c: [600, 200, 600, 800],
        move: 1,
        sight: 1
      },
      {
        c: [1000, 400, 1400, 400],
        move: 1,
        sight: 1
      }
    ];
    
    await scene.createEmbeddedDocuments("Wall", walls);
    
    ui.notifications.success('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ "–°—Ç—Ä–µ–ª–æ–∫" –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ startAiming()');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —á–∞—Ç–µ
    const instructions = `
      <div style="background: #e8f4f8; padding: 15px; border-radius: 8px;">
        <h3 style="margin: 0 0 10px 0; color: #2c5aa0;">üéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h3>
        <ol style="margin: 0; padding-left: 20px;">
          <li>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω "–°—Ç—Ä–µ–ª–æ–∫"</li>
          <li>–í –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: <code>startAiming()</code></li>
          <li>–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –º—ã—à—å –¥–ª—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è</li>
          <li>–õ–ö–ú –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –∏–ª–∏ <code>fireShot()</code></li>
          <li>–ü–ö–ú –∏–ª–∏ <code>stopAiming()</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã</li>
        </ol>
        <p style="margin: 10px 0 0 0; font-size: 0.9em; color: #666;">
          üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>getAimingInfo()</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        </p>
      </div>
    `;
    
    ChatMessage.create({
      content: instructions,
      speaker: { alias: "–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" }
    });
    
    return true;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã:', error);
    ui.notifications.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã');
    return false;
  }
};

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
 */
window.quickAimingTest = function() {
  const controlled = canvas.tokens.controlled;
  
  if (controlled.length === 0) {
    ui.notifications.warn('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return false;
  }
  
  const token = controlled[0];
  const aimingSystem = game.spaceholder?.aimingSystem;
  
  if (!aimingSystem) {
    ui.notifications.error('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return false;
  }
  
  // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
  const success = aimingSystem.startAiming(token);
  
  if (!success) {
    ui.notifications.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ');
    return false;
  }
  
  ui.notifications.info('–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã...');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (aimingSystem.isAiming) {
      aimingSystem.stopAiming();
      ui.notifications.success('–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  }, 3000);
  
  return true;
};

/**
 * –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –æ—Ç—Ä–µ–∑–∫–æ–≤
 */
window.testWallIntersection = function() {
  const aimingSystem = game.spaceholder?.aimingSystem;
  
  if (!aimingSystem) {
    console.error('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return;
  }
  
  const rayCaster = aimingSystem.rayCaster;
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
  const tests = [
    {
      name: '–ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ',
      ray: { start: {x: 0, y: 0}, end: {x: 100, y: 0} },
      wall: { start: {x: 50, y: -10}, end: {x: 50, y: 10} },
      expected: true
    },
    {
      name: '–ü—Ä–æ–º–∞—Ö –º–∏–º–æ —Å—Ç–µ–Ω—ã',
      ray: { start: {x: 0, y: 0}, end: {x: 100, y: 0} },
      wall: { start: {x: 50, y: 10}, end: {x: 50, y: 20} },
      expected: false
    },
    {
      name: '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–¥ —É–≥–ª–æ–º',
      ray: { start: {x: 0, y: 0}, end: {x: 100, y: 100} },
      wall: { start: {x: 0, y: 50}, end: {x: 100, y: 50} },
      expected: true
    },
    {
      name: '–õ—É—á –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ —Å—Ç–µ–Ω—ã',
      ray: { start: {x: 0, y: 0}, end: {x: 30, y: 0} },
      wall: { start: {x: 50, y: -10}, end: {x: 50, y: 10} },
      expected: false
    }
  ];
  
  console.log('üßØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏:');
  
  let passed = 0;
  let failed = 0;
  
  tests.forEach((test, index) => {
    const intersection = rayCaster._raySegmentIntersection(
      test.ray.start, test.ray.end,
      test.wall.start, test.wall.end
    );
    
    const hasIntersection = intersection !== null;
    const success = hasIntersection === test.expected;
    
    console.log(`${index + 1}. ${test.name}: ${success ? '‚úÖ –ü—Ä–æ—à–µ–ª' : '‚ùå –ü—Ä–æ–≤–∞–ª'}`);
    console.log(`   –û–∂–∏–¥–∞–ª–∏: ${test.expected}, –ü–æ–ª—É—á–∏–ª–∏: ${hasIntersection}`);
    
    if (intersection) {
      console.log(`   –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: (${Math.round(intersection.x)}, ${Math.round(intersection.y)})`);
    }
    
    if (success) passed++;
    else failed++;
  });
  
  console.log(`üìã –ò—Ç–æ–≥: ${passed} –ø—Ä–æ—à–ª–æ, ${failed} –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å`);
  
  return { passed, failed };
};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞–∫—Ä–æ—Å—ã –≤ Foundry
Hooks.once('ready', () => {
  console.log('üéØ SpaceHolder Aiming Demo Macros loaded');
  console.log('Available commands:');
  console.log('  ‚Ä¢ startAiming() - –Ω–∞—á–∞—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ');
  console.log('  ‚Ä¢ stopAiming() - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ');
  console.log('  ‚Ä¢ fireShot() - –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å');
  console.log('  ‚Ä¢ getAimingInfo() - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
  console.log('  ‚Ä¢ createAimingTestScene() - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ GM)');
  console.log('  ‚Ä¢ quickAimingTest() - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç');
  console.log('  ‚Ä¢ testWallIntersection() - —Ç–µ—Å—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏');
});
