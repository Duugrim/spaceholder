/**
 * ‚ö†Ô∏è LEGACY CODE - –û–¢–ö–õ–Æ–ß–ï–ù ‚ö†Ô∏è
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–µ–π –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è.
 * –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
 * –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
 * –î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: 2025-10-28
 */

// Aiming Logger for SpaceHolder - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ª–æ–≥–æ–≤
// –°–æ–±–∏—Ä–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ–ª–∫–∏—Ö –ª–æ–≥–æ–≤ –≤ —Å–≤–æ–¥–Ω—ã–µ –æ—Ç—á—ë—Ç—ã

export class AimingLogger {
  constructor() {
    this.isEnabled = true; // –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.currentShotData = null;
    this.shotCounter = 0;
  }

  /**
   * –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –≤—ã—Å—Ç—Ä–µ–ª
   */
  startShot(token, direction, maxDistance) {
    if (!this.isEnabled) return;
    
    const tokenName = token?.document?.name || token?.name || 'Unknown token';
    
    this.shotCounter++;
    this.currentShotData = {
      shotId: this.shotCounter,
      tokenName: tokenName,
      direction: Math.round(direction),
      maxDistance: maxDistance,
      segments: [],
      collisions: [],
      ricochets: [],
      startTime: Date.now(),
      endTime: null
    };

    console.log(`üéØ Shot #${this.shotCounter} started: ${tokenName} firing at ${Math.round(direction)}¬∞`);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç
   */
  addSegment(segmentIndex, segmentType, fromX, fromY, toX, toY, ricochetCount = 0) {
    if (!this.isEnabled || !this.currentShotData) return;

    this.currentShotData.segments.push({
      index: segmentIndex,
      type: segmentType,
      from: { x: Math.round(fromX), y: Math.round(fromY) },
      to: { x: Math.round(toX), y: Math.round(toY) },
      ricochetCount: ricochetCount
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–∏–∑–∏—é
   */
  addCollision(type, distance, point, details = {}) {
    if (!this.isEnabled || !this.currentShotData) return;

    this.currentShotData.collisions.push({
      type: type,
      distance: Math.round(distance * 100) / 100,
      point: { x: Math.round(point.x), y: Math.round(point.y) },
      details: details
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–∏–∫–æ—à–µ—Ç–∞
   */
  addRicochetAttempt(ricochetNumber, hitData, direction, startPoint, failReason = null) {
    if (!this.isEnabled || !this.currentShotData) return;

    const isSuccess = failReason === null;
    let reason;
    
    if (isSuccess && hitData) {
      reason = `Ricochet #${ricochetNumber} from wall at (${Math.round(hitData.point.x)}, ${Math.round(hitData.point.y)}) ‚Üí ${Math.round(direction)}¬∞`;
    } else if (failReason) {
      reason = failReason;
    } else {
      reason = 'Unknown ricochet attempt';
    }

    this.currentShotData.ricochets.push({
      success: isSuccess,
      ricochetNumber: ricochetNumber,
      reason: reason,
      direction: direction ? Math.round(direction) : null,
      startPoint: startPoint ? { x: Math.round(startPoint.x), y: Math.round(startPoint.y) } : null
    });
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç
   */
  finishShot() {
    if (!this.isEnabled || !this.currentShotData) return;

    this.currentShotData.endTime = Date.now();
    const duration = this.currentShotData.endTime - this.currentShotData.startTime;

    this._printShotReport();
    this.currentShotData = null;
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –æ –≤—ã—Å—Ç—Ä–µ–ª–µ
   */
  _printShotReport() {
    const data = this.currentShotData;
    const duration = data.endTime - data.startTime;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
    console.groupCollapsed(
      `üéØ Shot Report #${data.shotId}: ${data.tokenName} ‚Üí ` +
      `${data.segments.length} segments, ${data.collisions.length} hits, ${duration}ms`
    );

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(`üìä Shot Details:`);
    console.log(`   Token: ${data.tokenName}`);
    console.log(`   Direction: ${data.direction}¬∞`);
    console.log(`   Max distance: ${data.maxDistance}px`);
    console.log(`   Duration: ${duration}ms`);
    
    // –°–µ–≥–º–µ–Ω—Ç—ã (–∫—Ä–∞—Ç–∫–æ)
    if (data.segments.length > 0) {
      console.log(`\n‚û°Ô∏è Segments (${data.segments.length}):`);
      const primarySegments = data.segments.filter(s => s.ricochetCount === 0).length;
      const ricochetSegments = data.segments.filter(s => s.ricochetCount > 0).length;
      
      console.log(`   Primary: ${primarySegments}, Ricochets: ${ricochetSegments}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ, –µ—Å–ª–∏ –º–Ω–æ–≥–æ
      if (data.segments.length <= 5) {
        data.segments.forEach(seg => {
          const type = seg.ricochetCount > 0 ? `ricochet-${seg.ricochetCount}` : 'primary';
          console.log(`   ${seg.index + 1}. ${type}: (${seg.from.x}, ${seg.from.y}) ‚Üí (${seg.to.x}, ${seg.to.y})`);
        });
      } else {
        data.segments.slice(0, 2).forEach(seg => {
          const type = seg.ricochetCount > 0 ? `ricochet-${seg.ricochetCount}` : 'primary';
          console.log(`   ${seg.index + 1}. ${type}: (${seg.from.x}, ${seg.from.y}) ‚Üí (${seg.to.x}, ${seg.to.y})`);
        });
        console.log(`   ... ${data.segments.length - 4} more segments ...`);
        data.segments.slice(-2).forEach(seg => {
          const type = seg.ricochetCount > 0 ? `ricochet-${seg.ricochetCount}` : 'primary';
          console.log(`   ${seg.index + 1}. ${type}: (${seg.from.x}, ${seg.from.y}) ‚Üí (${seg.to.x}, ${seg.to.y})`);
        });
      }
    }

    // –ö–æ–ª–ª–∏–∑–∏–∏
    if (data.collisions.length > 0) {
      console.log(`\nüéØ Collisions (${data.collisions.length}):`);
      data.collisions.forEach((collision, index) => {
        const icon = this._getCollisionIcon(collision.type);
        console.log(`   ${index + 1}. ${icon} ${collision.type} at (${collision.point.x}, ${collision.point.y}) - ${collision.distance}px`);
      });
    } else {
      console.log(`\n‚ùå No collisions (miss)`);
    }

    // –†–∏–∫–æ—à–µ—Ç—ã
    if (data.ricochets.length > 0) {
      console.log(`\nüèÄ Ricochet attempts (${data.ricochets.length}):`);
      data.ricochets.forEach((ricochet, index) => {
        const status = ricochet.success ? '‚úÖ' : '‚ùå';
        console.log(`   ${index + 1}. ${status} ${ricochet.reason}`);
      });
    }

    console.groupEnd();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∫–æ–ª–ª–∏–∑–∏–∏
   */
  _getCollisionIcon(type) {
    const icons = {
      'token': 'üì∫',
      'wall': 'üßØ',
      'tile': 'üè†',
      'door': 'üö™'
    };
    return icons[type] || '‚ùì';
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
   */
  logSocket(action, direction, tokenName = 'Unknown') {
    if (!this.isEnabled) return;
    
    const directionText = direction !== undefined ? ` at ${Math.round(direction)}¬∞` : '';
    console.log(`üì° Socket: ${action} from ${tokenName}${directionText}`);
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  setEnabled(enabled) {
    this.isEnabled = enabled;
    console.log(`üìä Aiming logging ${enabled ? 'enabled' : 'disabled'}`);
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã)
   */
  log(message, ...args) {
    if (this.isEnabled) {
      console.log(message, ...args);
    }
  }

  /**
   * –í–∞–∂–Ω—ã–π –ª–æ–≥ (–¥–ª—è –æ—à–∏–±–æ–∫ –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
   */
  important(message, ...args) {
    console.log(message, ...args); // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const aimingLogger = new AimingLogger();