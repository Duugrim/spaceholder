// Aiming System for SpaceHolder - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è —Å –ª—É—á–∞–º–∏
// –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ TokenPointer –∏ TokenRotator —Å–∏—Å—Ç–µ–º–∞–º–∏

import { RayCaster } from './ray-casting.mjs';
import { RayRenderer } from './ray-renderer.mjs';

export class AimingSystem {
  constructor() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    this.isAiming = false;
    this.aimingToken = null;
    this.currentAimDirection = 0; // –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    this.currentRay = null;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.config = {
      maxRayDistance: 2000, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      aimingSensitivity: 1.0, // —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏—Ü–µ–ª–∞
      showAimingReticle: true, // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
      allowRicochet: false, // —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∏–∫–æ—à–µ—Ç—ã
      maxRicochets: 3, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–∫–æ—à–µ—Ç–æ–≤
      curvedRaysEnabled: false, // –∏–∑–æ–≥–Ω—É—Ç—ã–µ –ª—É—á–∏
    };
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    this.rayCaster = new RayCaster(this);
    this.rayRenderer = new RayRenderer(this);
    
    // –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this._boundEvents = {
      onMouseMove: this._onMouseMove.bind(this),
      onKeyDown: this._onKeyDown.bind(this),
      onKeyUp: this._onKeyUp.bind(this),
      onMouseDown: this._onMouseDown.bind(this),
      onContextMenu: this._onContextMenu.bind(this)
    };
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  initialize() {
    console.log('SpaceHolder | AimingSystem: Initializing aiming system');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this._registerSettings();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.rayCaster.initialize();
    this.rayRenderer.initialize();
  }
  
  /**
   * –ù–∞—á–∞—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
   * @param {Token} token - —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
   * @param {Object} weapon - –æ—Ä—É–∂–∏–µ –∏–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –∞—Ç–∞–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  startAiming(token, weapon = null) {
    if (!token || !token.isOwner) {
      ui.notifications.warn("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º");
      return false;
    }
    
    if (this.isAiming) {
      this.stopAiming();
    }
    
    console.log('SpaceHolder | AimingSystem: Starting aiming for token', token.name);
    
    this.isAiming = true;
    this.aimingToken = token;
    this.weapon = weapon;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç TokenPointer –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    this.currentAimDirection = token.document.getFlag('spaceholder', 'tokenpointerDirection') ?? 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    this._showAimingUI();
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    this._bindEvents();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ª—É—á –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    this._updateAiming();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    this._notifyAimingStart();
    
    return true;
  }
  
  /**
   * –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
   */
  stopAiming() {
    if (!this.isAiming) return;
    
    console.log('SpaceHolder | AimingSystem: Stopping aiming');
    
    this.isAiming = false;
    this.aimingToken = null;
    this.weapon = null;
    
    // –°–∫—Ä—ã–≤–∞–µ–º UI
    this._hideAimingUI();
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this._unbindEvents();
    
    // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ª—É—á–∞
    this.rayRenderer.clearRay();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    this._notifyAimingEnd();
  }
  
  /**
   * –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
   */
  fire() {
    if (!this.isAiming || !this.aimingToken) {
      ui.notifications.warn("–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ");
      return;
    }
    
    const tokenCenter = this.aimingToken.center;
    console.log(`üî• FIRE! ${this.aimingToken.name} firing from (${Math.round(tokenCenter.x)}, ${Math.round(tokenCenter.y)})`);
    console.log(`üéØ Direction: ${Math.round(this.currentAimDirection)}¬∞`);
    console.log(`üìç Max distance: ${this.config.maxRayDistance}px`);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª—É—á
    const ray = this.rayCaster.createRay(
      tokenCenter,
      this.currentAimDirection,
      this.config.maxRayDistance
    );
    
    console.log(`‚û°Ô∏è Ray created: from (${Math.round(ray.origin.x)}, ${Math.round(ray.origin.y)}) to (${Math.round(ray.end.x)}, ${Math.round(ray.end.y)})`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    const collisions = this.rayCaster.checkCollisions(ray);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è
    this._processHits(collisions);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã—Å—Ç—Ä–µ–ª–∞
    this.rayRenderer.showFireAnimation(ray, collisions);
    
    console.log(`‚úÖ Fire sequence completed for ${this.aimingToken.name}`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
    this.stopAiming();
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _updateAiming() {
    if (!this.isAiming || !this.aimingToken) return;
    
    // –°–æ–∑–¥–∞–µ–º –ª—É—á –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const ray = this.rayCaster.createRay(
      this.aimingToken.center,
      this.currentAimDirection,
      this.config.maxRayDistance
    );
    
    this.currentRay = ray;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    this.rayRenderer.updateAimingPreview(ray);
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å UI –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _showAimingUI() {
    // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä
    document.body.style.cursor = 'crosshair';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (this.config.showAimingReticle) {
      this.rayRenderer.showAimingReticle(this.aimingToken);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    this._showAimingInfo();
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å UI –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _hideAimingUI() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
    document.body.style.cursor = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
    this.rayRenderer.hideAimingReticle();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    this._hideAimingInfo();
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
   */
  _showAimingInfo() {
    const info = document.createElement('div');
    info.id = 'aiming-info';
    info.className = 'aiming-info-panel';
    info.innerHTML = `
      <div class="aiming-instructions">
        <h3>–†–µ–∂–∏–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è</h3>
        <p>üéØ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –º—ã—à—å –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è</p>
        <p>üî´ –õ–ö–ú - –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å</p>
        <p>üö´ –ü–ö–ú –∏–ª–∏ ESC - –æ—Ç–º–µ–Ω–∏—Ç—å</p>
      </div>
    `;
    
    document.body.appendChild(info);
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
   */
  _hideAimingInfo() {
    const info = document.getElementById('aiming-info');
    if (info) info.remove();
  }
  
  /**
   * –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
   */
  _bindEvents() {
    canvas.stage.on('mousemove', this._boundEvents.onMouseMove);
    document.addEventListener('keydown', this._boundEvents.onKeyDown);
    document.addEventListener('keyup', this._boundEvents.onKeyUp);
    canvas.stage.on('mousedown', this._boundEvents.onMouseDown);
    document.addEventListener('contextmenu', this._boundEvents.onContextMenu);
  }
  
  /**
   * –£–±—Ä–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  _unbindEvents() {
    canvas.stage.off('mousemove', this._boundEvents.onMouseMove);
    document.removeEventListener('keydown', this._boundEvents.onKeyDown);
    document.removeEventListener('keyup', this._boundEvents.onKeyUp);
    canvas.stage.off('mousedown', this._boundEvents.onMouseDown);
    document.removeEventListener('contextmenu', this._boundEvents.onContextMenu);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
   */
  _onMouseMove(event) {
    if (!this.isAiming || !this.aimingToken) return;
    
    const mousePos = canvas.mousePosition;
    const tokenCenter = this.aimingToken.center;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
    const dx = mousePos.x - tokenCenter.x;
    const dy = mousePos.y - tokenCenter.y;
    const distance = Math.hypot(dx, dy);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥—É—Å—ã (0¬∞ = –≤–ø—Ä–∞–≤–æ, 90¬∞ = –≤–Ω–∏–∑)
    let angle = Math.atan2(dy, dx) * (180 / Math.PI);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    angle *= this.config.aimingSensitivity;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–∫–∞–∂–¥—ã–µ 5 –≥—Ä–∞–¥—É—Å–æ–≤)
    if (Math.abs(angle - this.currentAimDirection) > 5 || this.currentAimDirection === 0) {
      console.log(`üéØ Aiming direction: ${Math.round(angle)}¬∞ (mouse: ${Math.round(mousePos.x)}, ${Math.round(mousePos.y)}, distance: ${Math.round(distance)}px)`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    this.currentAimDirection = angle;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    this._updateAiming();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
   */
  _onKeyDown(event) {
    if (!this.isAiming) return;
    
    switch (event.code) {
      case 'Escape':
        event.preventDefault();
        this.stopAiming();
        break;
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
   */
  _onKeyUp(event) {
    // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
   */
  _onMouseDown(event) {
    if (!this.isAiming) return;
    
    if (event.button === 0) { // –õ–ö–ú
      event.preventDefault();
      this.fire();
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (–æ—Ç–º–µ–Ω–∞)
   */
  _onContextMenu(event) {
    if (!this.isAiming) return;
    
    event.preventDefault();
    this.stopAiming();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π
   */
  _processHits(collisions) {
    console.log('üéØ SpaceHolder | AimingSystem: Processing hits...');
    console.log(`üìä Total collisions detected: ${collisions.length}`);
    
    if (!collisions || collisions.length === 0) {
      console.log('‚ùå No hits detected - miss!');
      ChatMessage.create({
        content: `${this.aimingToken.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!`,
        speaker: ChatMessage.getSpeaker({ token: this.aimingToken })
      });
      return;
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    console.group('üîç Collision Details:');
    collisions.forEach((collision, index) => {
      const distance = Math.round(collision.distance * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
      const point = `(${Math.round(collision.point.x)}, ${Math.round(collision.point.y)})`;
      
      console.log(`${index + 1}. ${this._getCollisionIcon(collision.type)} Type: ${collision.type}`);
      console.log(`   Distance: ${distance}px`);
      console.log(`   Point: ${point}`);
      
      if (collision.type === 'token') {
        console.log(`   Target: ${collision.object.name} (ID: ${collision.object.id})`);
        console.log(`   Token bounds: ${collision.object.bounds.width}x${collision.object.bounds.height}`);
      } else if (collision.type === 'wall') {
        const wall = collision.object;
        console.log(`   Wall ID: ${wall.id}`);
        console.log(`   Wall coordinates: (${wall.document.c[0]},${wall.document.c[1]}) -> (${wall.document.c[2]},${wall.document.c[3]})`);
        console.log(`   Blocks movement: ${wall.document.move}`);
        console.log(`   Blocks sight: ${wall.document.sight}`);
      } else if (collision.type === 'tile') {
        console.log(`   Tile: ${collision.object.document.texture.src}`);
        console.log(`   Tile bounds: ${collision.object.bounds.width}x${collision.object.bounds.height}`);
      }
      
      console.log('   ---');
    });
    console.groupEnd();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    collisions.forEach((collision, index) => {
      if (collision.type === 'token') {
        this._processTokenHit(collision.object, index === 0, index + 1, collisions.length);
      } else if (collision.type === 'wall') {
        this._processWallHit(collision.object, index + 1, collisions.length);
      } else if (collision.type === 'tile') {
        this._processTileHit(collision.object, index + 1, collisions.length);
      }
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    const tokenHits = collisions.filter(c => c.type === 'token').length;
    const wallHits = collisions.filter(c => c.type === 'wall').length;
    const tileHits = collisions.filter(c => c.type === 'tile').length;
    
    console.log(`üìã Hit Summary: ${tokenHits} tokens, ${wallHits} walls, ${tileHits} tiles`);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
   */
  _processTokenHit(target, isPrimary = true, hitNumber = 1, totalHits = 1) {
    const attacker = this.aimingToken;
    
    console.log(`üéØ Token Hit #${hitNumber}: ${attacker.name} -> ${target.name}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ø–∞–¥–∞–Ω–∏—è
    const hitType = isPrimary ? '–ü–µ—Ä–≤–∏—á–Ω–æ–µ' : '–ü—Ä–æ–±–∏–≤–∞—é—â–µ–µ';
    const hitMessage = totalHits > 1 ? 
      `üéØ ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${target.name}! (${hitType} –ø–æ–ø–∞–¥–∞–Ω–∏–µ #${hitNumber} –∏–∑ ${totalHits})` :
      `üéØ ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${target.name}!`;
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
    ChatMessage.create({
      content: hitMessage,
      speaker: ChatMessage.getSpeaker({ token: attacker })
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å—Ç–µ–Ω—É
   */
  _processWallHit(wall, hitNumber = 1, totalHits = 1) {
    const attacker = this.aimingToken;
    
    console.log(`üí• Wall Hit #${hitNumber}: ${attacker.name} -> Wall (${wall.id})`);
    console.log(`   Wall type: ${wall.document.door ? 'Door' : 'Wall'}`);
    console.log(`   Wall state: ${wall.document.ds ? 'Open' : 'Closed'}`);
    
    const wallType = wall.document.door ? '–¥–≤–µ—Ä—å' : '—Å—Ç–µ–Ω—É';
    const hitMessage = totalHits > 1 ?
      `üí• ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${wallType}! (–ü–æ–ø–∞–¥–∞–Ω–∏–µ #${hitNumber} –∏–∑ ${totalHits})` :
      `üí• ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${wallType}!`;
    
    ChatMessage.create({
      content: hitMessage,
      speaker: ChatMessage.getSpeaker({ token: attacker })
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–∞–π–ª
   */
  _processTileHit(tile, hitNumber = 1, totalHits = 1) {
    const attacker = this.aimingToken;
    
    console.log(`üè† Tile Hit #${hitNumber}: ${attacker.name} -> Tile (${tile.id})`);
    
    const hitMessage = totalHits > 1 ?
      `üè† ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—ä–µ–∫—Ç! (–ü–æ–ø–∞–¥–∞–Ω–∏–µ #${hitNumber} –∏–∑ ${totalHits})` :
      `üè† ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—ä–µ–∫—Ç!`;
    
    ChatMessage.create({
      content: hitMessage,
      speaker: ChatMessage.getSpeaker({ token: attacker })
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
   */
  _getCollisionIcon(type) {
    const icons = {
      'token': 'üì∫',  // —Ç–æ–∫–µ–Ω
      'wall': 'üßØ',   // —Å—Ç–µ–Ω–∞
      'tile': 'üè†',   // —Ç–∞–π–ª
      'door': 'üö™',   // –¥–≤–µ—Ä—å
    };
    
    return icons[type] || '‚ùì'; // –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
  }
  
  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _notifyAimingStart() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∫–µ—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
  }
  
  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _notifyAimingEnd() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∫–µ—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
   */
  _registerSettings() {
    const MODULE_NS = 'spaceholder';
    const PREF = 'aimingsystem';
    
    game.settings.register(MODULE_NS, `${PREF}.maxRayDistance`, {
      name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞',
      hint: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª—É—á–µ–π –≤ –ø–∏–∫—Å–µ–ª—è—Ö',
      scope: 'world',
      config: false,
      default: 2000,
      type: Number,
    });
    
    game.settings.register(MODULE_NS, `${PREF}.showAimingReticle`, {
      name: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É',
      hint: '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è',
      scope: 'client',
      config: false,
      default: true,
      type: Boolean,
    });
    
    game.settings.register(MODULE_NS, `${PREF}.aimingSensitivity`, {
      name: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è',
      hint: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏—Ü–µ–ª–∞',
      scope: 'client',
      config: false,
      default: 1.0,
      type: Number,
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
   */
  getSetting(key) {
    return game.settings.get('spaceholder', `aimingsystem.${key}`);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
export function registerAimingSystemSettings() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ AimingSystem
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
export function installAimingSystemHooks() {
  // –•—É–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ç–∞–∫
  Hooks.on('preItemRoll', (item, rollConfig) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—Ç–∏–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    if (item.type === 'item' && item.actor?.getActiveTokens()?.[0]) {
      const token = item.actor.getActiveTokens()[0];
      const aimingSystem = game.spaceholder?.aimingSystem;
      
      if (aimingSystem && game.keyboard.isModifierActive('alt')) {
        // Alt + –∫–ª–∏–∫ = –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∞—Ç–∞–∫–∏
        aimingSystem.startAiming(token, item);
        return false; // –û—Ç–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π —Ä–æ–ª–ª
      }
    }
  });
  
  // –•—É–∫ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ö–æ–ª—Å—Ç–∞
  Hooks.on('canvasReady', () => {
    const aimingSystem = game.spaceholder?.aimingSystem;
    if (aimingSystem) {
      aimingSystem.rayRenderer.onCanvasReady();
    }
  });
}