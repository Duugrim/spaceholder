// Aiming System for SpaceHolder - –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è —Å –ª—É—á–∞–º–∏
// –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ TokenPointer –∏ TokenRotator —Å–∏—Å—Ç–µ–º–∞–º–∏

import { RayCaster } from './ray-casting.mjs';
import { RayRenderer } from './ray-renderer.mjs';
import { AimingSocketManager } from './aiming-socket-manager.mjs';

export class AimingSystem {
  constructor() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    this.isAiming = false;
    this.aimingToken = null;
    this.currentAimDirection = 0; // –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    this.currentRay = null;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.config = {
      maxRayDistance: 2000, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      aimingSensitivity: 1.0, // —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏—Ü–µ–ª–∞
      showAimingReticle: true, // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
      allowRicochet: false, // —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∏–∫–æ—à–µ—Ç—ã
      maxRicochets: 3, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–∫–æ—à–µ—Ç–æ–≤
      curvedRaysEnabled: false, // –∏–∑–æ–≥–Ω—É—Ç—ã–µ –ª—É—á–∏
      
      // –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
      previewRayLength: 500, // –¥–ª–∏–Ω–∞ –ª—É—á–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–∏
      fireSegmentLength: 100, // –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø—Ä–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ
      maxFireSegments: 50, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤—ã—Å—Ç—Ä–µ–ª–∞
    };
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    this.rayCaster = new RayCaster(this);
    this.rayRenderer = new RayRenderer(this);
    this.socketManager = new AimingSocketManager(this);
    
    // –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this._boundEvents = {
      onMouseMove: this._onMouseMove.bind(this),
      onKeyDown: this._onKeyDown.bind(this),
      onKeyUp: this._onKeyUp.bind(this),
      onMouseDown: this._onMouseDown.bind(this),
      onContextMenu: this._onContextMenu.bind(this)
    };
    
    // –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    this._lastPreviewUpdate = 0;
    this._previewUpdateInterval = 16; // ~60 FPS
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  initialize() {
    console.log('SpaceHolder | AimingSystem: Initializing aiming system');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this._registerSettings();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.rayCaster.initialize();
    this.rayRenderer.initialize();
    this.socketManager.initialize();
  }
  
  /**
   * –ù–∞—á–∞—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
   * @param {Token} token - —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
   * @param {Object} weapon - –æ—Ä—É–∂–∏–µ –∏–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –∞—Ç–∞–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  startAiming(token, weapon = null) {
    if (!token || !token.isOwner) {
      ui.notifications.warn("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º");
      return false;
    }
    
    if (this.isAiming) {
      this.stopAiming();
    }
    
    console.log('SpaceHolder | AimingSystem: Starting aiming for token', token.name);
    
    this.isAiming = true;
    this.aimingToken = token;
    this.weapon = weapon;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç TokenPointer –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    this.currentAimDirection = token.document.getFlag('spaceholder', 'tokenpointerDirection') ?? 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    this._showAimingUI();
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    this._bindEvents();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    this._updateAimingPreview();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    this._notifyAimingStart();
    
    return true;
  }
  
  /**
   * –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
   */
  stopAiming() {
    if (!this.isAiming) return;
    
    console.log('SpaceHolder | AimingSystem: Stopping aiming');
    
    this.isAiming = false;
    this.aimingToken = null;
    this.weapon = null;
    
    // –°–∫—Ä—ã–≤–∞–µ–º UI
    this._hideAimingUI();
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this._unbindEvents();
    
    // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ª—É—á–∞
    this.rayRenderer.clearRay();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    this._notifyAimingEnd();
  }
  
  /**
   * –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏)
   */
  async fire() {
    if (!this.isAiming || !this.aimingToken) {
      ui.notifications.warn("–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ");
      return;
    }
    
    const tokenCenter = this.aimingToken.center;
    console.log(`üî• FIRE! ${this.aimingToken.name} firing from (${Math.round(tokenCenter.x)}, ${Math.round(tokenCenter.y)})`);
    console.log(`üéØ Direction: ${Math.round(this.currentAimDirection)}¬∞`);
    console.log(`üìç Segment length: ${this.config.fireSegmentLength}px, Max segments: ${this.config.maxFireSegments}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    const shotData = {
      tokenId: this.aimingToken.id,
      direction: this.currentAimDirection,
      startPosition: tokenCenter,
      timestamp: Date.now(),
      weaponName: this.weapon?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
    };
    
    this.socketManager.broadcastFireShot(shotData);
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã—Å—Ç—Ä–µ–ª—ã
    if (this.rayRenderer.currentRayGraphics) {
      this.rayRenderer.currentRayGraphics.destroy();
      this.rayRenderer.currentRayGraphics = null;
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≤—ã—Å—Ç—Ä–µ–ª–∞
    const fireResult = await this._fireRecursive({
      currentPosition: tokenCenter,
      direction: this.currentAimDirection,
      segmentIndex: 0,
      totalHits: [],
      segments: [],
      socketData: shotData // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è socket-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    if (fireResult.totalHits.length > 0) {
      this._processHits(fireResult.totalHits);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ –ø–æ–ø–∞–¥–∞–Ω–∏—è—Ö
      for (const hit of fireResult.totalHits) {
        this.socketManager.broadcastShotHit({
          tokenId: this.aimingToken.id,
          hitType: hit.type,
          hitPoint: hit.point,
          targetId: hit.object?.id,
          distance: hit.distance
        });
      }
    } else {
      // –ü—Ä–æ–º–∞—Ö
      console.log('‚ùå No hits detected - miss!');
      ChatMessage.create({
        content: `${this.aimingToken.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!`,
        speaker: ChatMessage.getSpeaker({ token: this.aimingToken })
      });
    }
    
    console.log(`‚úÖ Fire sequence completed for ${this.aimingToken.name}. Total segments: ${fireResult.segments.length}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
    this.socketManager.broadcastShotComplete({
      tokenId: this.aimingToken.id,
      totalSegments: fireResult.segments.length,
      totalHits: fireResult.totalHits.length,
      segments: fireResult.segments.map(seg => ({
        start: seg.start || seg.origin,
        end: seg.end,
        isRicochet: seg.isRicochet || false,
        bounceNumber: seg.bounceNumber || 0
      }))
    });
    
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
    // this.stopAiming();
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á)
   */
  _updateAimingPreview() {
    if (!this.isAiming || !this.aimingToken) return;
    
    // –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const now = Date.now();
    if (now - this._lastPreviewUpdate < this._previewUpdateInterval) {
      return;
    }
    this._lastPreviewUpdate = now;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π)
    const previewRay = this.rayCaster.createSimpleRay(
      this.aimingToken.center,
      this.currentAimDirection,
      this.config.previewRayLength
    );
    
    this.currentPreviewRay = previewRay;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    this.rayRenderer.updateAimingPreview(previewRay);
  }
  
  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤—ã—Å—Ç—Ä–µ–ª–∞
   * @param {Object} fireState - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
   * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞
   */
  async _fireRecursive(fireState) {
    const { currentPosition, direction, segmentIndex, totalHits, segments, ricochetCount = 0, lastWallId = null, socketData = null } = fireState;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    if (segmentIndex >= this.config.maxFireSegments) {
      console.log(`‚ö†Ô∏è Reached maximum segments limit: ${this.config.maxFireSegments}`);
      return { totalHits, segments };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∏–∫–æ—à–µ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    const maxRicochets = this.config.maxRicochets;
    console.log(`üìä Max ricochets from config: ${maxRicochets}, current: ${ricochetCount}`);
    if (ricochetCount >= maxRicochets) {
      console.log(`üèÄ Reached maximum ricochet limit: ${maxRicochets}`);
      return { totalHits, segments };
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
    const segment = this.rayCaster.createSimpleRay(
      currentPosition,
      direction,
      this.config.fireSegmentLength
    );
    
    // –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ä–∏–∫–æ—à–µ—Ç
    if (ricochetCount > 0) {
      segment.isRicochet = true;
      segment.bounceNumber = ricochetCount;
    }
    
    segments.push(segment);
    
    const segmentType = ricochetCount > 0 ? `ricochet-${ricochetCount}` : 'primary';
    console.log(`‚û°Ô∏è Segment ${segmentIndex + 1} (${segmentType}): from (${Math.round(currentPosition.x)}, ${Math.round(currentPosition.y)}) to (${Math.round(segment.end.x)}, ${Math.round(segment.end.y)})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const allCollisions = this.rayCaster.checkSegmentCollisions(segment);
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–µ–Ω—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    const collisions = allCollisions.filter(collision => {
      if (collision.type === 'wall' && lastWallId && collision.object.id === lastWallId) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–µ–Ω—É, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ–Ω—å –º–∞–ª–æ
        return collision.distance > 5; // –ú–∏–Ω–∏–º—É–º 5 –ø–∏–∫—Å–µ–ª–µ–π
      }
      return true;
    });
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
    this.rayRenderer.drawFireSegment(segment, segmentIndex);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–µ–≥–º–µ–Ω—Ç–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
    if (socketData) {
      this.socketManager.broadcastShotSegment({
        tokenId: socketData.tokenId,
        segmentIndex: segmentIndex,
        segment: {
          start: segment.start || segment.origin,
          end: segment.end,
          isRicochet: segment.isRicochet || false,
          bounceNumber: segment.bounceNumber || 0
        },
        ricochetCount: ricochetCount
      });
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    const delay = ricochetCount > 0 ? 75 : 50; // –†–∏–∫–æ—à–µ—Ç—ã —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    await new Promise(resolve => setTimeout(resolve, delay));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    if (collisions.length > 0) {
      totalHits.push(...collisions);
      console.log(`üéØ Segment ${segmentIndex + 1} hit ${collisions.length} object(s)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
      const firstHit = collisions[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∏–∫–æ—à–µ—Ç
      if (firstHit.type === 'wall' && this._canRicochet(firstHit, ricochetCount)) {
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const reflectedDirection = this._calculateRicochetDirection(segment, firstHit);
        
        // –°–¥–≤–∏–≥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É —Ä–∏–∫–æ—à–µ—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
        const offsetDistance = 3; // –ü–∏–∫—Å–µ–ª–∏ —Å–¥–≤–∏–≥–∞
        const reflectedRadians = reflectedDirection * Math.PI / 180;
        const ricochetStartPoint = {
          x: firstHit.point.x + Math.cos(reflectedRadians) * offsetDistance,
          y: firstHit.point.y + Math.sin(reflectedRadians) * offsetDistance
        };
        
        console.log(`üèÄ Ricochet ${ricochetCount + 1}: bouncing off wall (${firstHit.object.id}) at angle ${Math.round(reflectedDirection)}¬∞`);
        console.log(`   ‚û°Ô∏è Hit point: (${Math.round(firstHit.point.x)}, ${Math.round(firstHit.point.y)})`);
        console.log(`   ‚û°Ô∏è Start point: (${Math.round(ricochetStartPoint.x)}, ${Math.round(ricochetStartPoint.y)})`);
        console.log(`   ‚û°Ô∏è Offset: ${offsetDistance}px in direction ${Math.round(reflectedDirection)}¬∞`);
        
        return await this._fireRecursive({
          currentPosition: ricochetStartPoint,
          direction: reflectedDirection,
          segmentIndex: segmentIndex + 1,
          totalHits,
          segments,
          ricochetCount: ricochetCount + 1,
          lastWallId: firstHit.object.id, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å—Ç–µ–Ω—ã
          socketData: socketData // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è socket
        });
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—É—é —Å—Ç–µ–Ω—É
      if (this._shouldStopFiring(firstHit)) {
        console.log(`üõë Stopping fire at segment ${segmentIndex + 1} due to ${firstHit.type}`);
        return { totalHits, segments };
      }
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    return await this._fireRecursive({
      currentPosition: segment.end,
      direction: direction,
      segmentIndex: segmentIndex + 1,
      totalHits,
      segments,
      ricochetCount,
      lastWallId, // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
      socketData: socketData // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è socket
    });
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª –ø—Ä–∏ –¥–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏
   * @param {Object} collision - —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
   * @returns {boolean} —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
   */
  _shouldStopFiring(collision) {
    switch (collision.type) {
      case 'token':
        return true; // –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–∫–µ–Ω–∞—Ö
      case 'wall':
        return true; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–µ–Ω–∞—Ö (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–∏–∫–æ—à–µ—Ç–∞)
      case 'tile':
        return true; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∞–π–ª–∞—Ö
      default:
        return true;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∏–∫–æ—à–µ—Ç –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   * @param {Object} collision - —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
   * @param {number} currentRicochets - —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–∫–æ—à–µ—Ç–æ–≤
   * @returns {boolean} –º–æ–∂–Ω–æ –ª–∏ —Ä–∏–∫–æ—à–µ—Ç
   */
  _canRicochet(collision, currentRicochets) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ä–∏–∫–æ—à–µ—Ç—ã –≤–æ–æ–±—â–µ
    console.log(`üîç Ricochet check: allowRicochet=${this.config.allowRicochet}, currentRicochets=${currentRicochets}`);
    if (!this.config.allowRicochet) {
      console.log(`‚ùå Ricochets disabled in config`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∏–∫–æ—à–µ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    const maxRicochets = this.config.maxRicochets;
    console.log(`üî¢ Ricochet limit check: ${currentRicochets}/${maxRicochets}`);
    if (currentRicochets >= maxRicochets) {
      console.log(`‚ö†Ô∏è Ricochet limit reached`);
      return false;
    }
    
    // –†–∏–∫–æ—à–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–æ –æ—Ç —Å—Ç–µ–Ω
    if (collision.type !== 'wall') {
      return false;
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    // - –¢–∏–ø —Å—Ç–µ–Ω—ã (–æ–±—ã—á–Ω–∞—è/–¥–≤–µ—Ä—å)
    // - –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω—ã
    // - –£–≥–æ–ª –ø–∞–¥–µ–Ω–∏—è
    
    return true;
  }
  
  /**
   * –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏–∫–æ—à–µ—Ç–∞
   * @param {Object} segment - —Å–µ–≥–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç–µ–Ω–æ–π
   * @param {Object} wallCollision - —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–Ω–æ–π
   * @returns {number} –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
   */
  _calculateRicochetDirection(segment, wallCollision) {
    const startPoint = segment.start || segment.origin;
    const endPoint = segment.end;
    const wall = wallCollision.wallRay;
    
    // –í–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É—á–∞
    const rayVector = {
      x: endPoint.x - startPoint.x,
      y: endPoint.y - startPoint.y
    };
    const rayLength = Math.hypot(rayVector.x, rayVector.y);
    const rayDir = {
      x: rayVector.x / rayLength,
      y: rayVector.y / rayLength
    };
    
    // –í–µ–∫—Ç–æ—Ä —Å—Ç–µ–Ω—ã
    const wallVector = {
      x: wall.B.x - wall.A.x,
      y: wall.B.y - wall.A.y
    };
    const wallLength = Math.hypot(wallVector.x, wallVector.y);
    
    // –ù–æ—Ä–º–∞–ª—å –∫ —Å—Ç–µ–Ω–µ (–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä)
    const wallNormal = {
      x: -wallVector.y / wallLength,
      y: wallVector.x / wallLength
    };
    
    // –§–æ—Ä–º—É–ª–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è: R = I - 2(I ¬∑ N)N
    const dot = 2 * (rayDir.x * wallNormal.x + rayDir.y * wallNormal.y);
    const reflectedDir = {
      x: rayDir.x - dot * wallNormal.x,
      y: rayDir.y - dot * wallNormal.y
    };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    const reflectedAngle = Math.atan2(reflectedDir.y, reflectedDir.x) * (180 / Math.PI);
    
    return reflectedAngle;
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å UI –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _showAimingUI() {
    // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä
    document.body.style.cursor = 'crosshair';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (this.config.showAimingReticle) {
      this.rayRenderer.showAimingReticle(this.aimingToken);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    this._showAimingInfo();
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å UI –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _hideAimingUI() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
    document.body.style.cursor = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É
    this.rayRenderer.hideAimingReticle();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    this._hideAimingInfo();
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
   */
  _showAimingInfo() {
    const info = document.createElement('div');
    info.id = 'aiming-info';
    info.className = 'aiming-info-panel';
    info.innerHTML = `
      <div class="aiming-instructions">
        <h3>–†–µ–∂–∏–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è</h3>
        <p>üéØ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –º—ã—à—å –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è</p>
        <p>üî´ –õ–ö–ú - –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å</p>
        <p>üö´ –ü–ö–ú –∏–ª–∏ ESC - –æ—Ç–º–µ–Ω–∏—Ç—å</p>
      </div>
    `;
    
    document.body.appendChild(info);
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
   */
  _hideAimingInfo() {
    const info = document.getElementById('aiming-info');
    if (info) info.remove();
  }
  
  /**
   * –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
   */
  _bindEvents() {
    canvas.stage.on('mousemove', this._boundEvents.onMouseMove);
    document.addEventListener('keydown', this._boundEvents.onKeyDown);
    document.addEventListener('keyup', this._boundEvents.onKeyUp);
    canvas.stage.on('mousedown', this._boundEvents.onMouseDown);
    document.addEventListener('contextmenu', this._boundEvents.onContextMenu);
  }
  
  /**
   * –£–±—Ä–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  _unbindEvents() {
    canvas.stage.off('mousemove', this._boundEvents.onMouseMove);
    document.removeEventListener('keydown', this._boundEvents.onKeyDown);
    document.removeEventListener('keyup', this._boundEvents.onKeyUp);
    canvas.stage.off('mousedown', this._boundEvents.onMouseDown);
    document.removeEventListener('contextmenu', this._boundEvents.onContextMenu);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
   */
  _onMouseMove(event) {
    if (!this.isAiming || !this.aimingToken) return;
    
    const mousePos = canvas.mousePosition;
    const tokenCenter = this.aimingToken.center;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
    const dx = mousePos.x - tokenCenter.x;
    const dy = mousePos.y - tokenCenter.y;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥—É—Å—ã (0¬∞ = –≤–ø—Ä–∞–≤–æ, 90¬∞ = –≤–Ω–∏–∑)
    // –£–±—Ä–∞–ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–µ–º—Å—è –ø—Ä—è–º–æ –≤ –∫—É—Ä—Å–æ—Ä
    const angle = Math.atan2(dy, dx) * (180 / Math.PI);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    this.currentAimDirection = angle;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ª—É—á)
    this._updateAimingPreview();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
   */
  _onKeyDown(event) {
    if (!this.isAiming) return;
    
    switch (event.code) {
      case 'Escape':
        event.preventDefault();
        this.stopAiming();
        break;
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
   */
  _onKeyUp(event) {
    // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
   */
  _onMouseDown(event) {
    if (!this.isAiming) return;
    
    if (event.button === 0) { // –õ–ö–ú
      event.preventDefault();
      this.fire();
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (–æ—Ç–º–µ–Ω–∞)
   */
  _onContextMenu(event) {
    if (!this.isAiming) return;
    
    event.preventDefault();
    this.stopAiming();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π
   */
  _processHits(collisions) {
    console.log('üéØ SpaceHolder | AimingSystem: Processing hits...');
    console.log(`üìä Total collisions detected: ${collisions.length}`);
    
    if (!collisions || collisions.length === 0) {
      console.log('‚ùå No hits detected - miss!');
      ChatMessage.create({
        content: `${this.aimingToken.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!`,
        speaker: ChatMessage.getSpeaker({ token: this.aimingToken })
      });
      return;
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    console.group('üîç Collision Details:');
    collisions.forEach((collision, index) => {
      const distance = Math.round(collision.distance * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
      const point = `(${Math.round(collision.point.x)}, ${Math.round(collision.point.y)})`;
      
      console.log(`${index + 1}. ${this._getCollisionIcon(collision.type)} Type: ${collision.type}`);
      console.log(`   Distance: ${distance}px`);
      console.log(`   Point: ${point}`);
      
      if (collision.type === 'token') {
        console.log(`   Target: ${collision.object.name} (ID: ${collision.object.id})`);
        console.log(`   Token bounds: ${collision.object.bounds.width}x${collision.object.bounds.height}`);
      } else if (collision.type === 'wall') {
        const wall = collision.object;
        console.log(`   Wall ID: ${wall.id}`);
        console.log(`   Wall coordinates: (${wall.document.c[0]},${wall.document.c[1]}) -> (${wall.document.c[2]},${wall.document.c[3]})`);
        console.log(`   Blocks movement: ${wall.document.move}`);
        console.log(`   Blocks sight: ${wall.document.sight}`);
      } else if (collision.type === 'tile') {
        console.log(`   Tile: ${collision.object.document.texture.src}`);
        console.log(`   Tile bounds: ${collision.object.bounds.width}x${collision.object.bounds.height}`);
      }
      
      console.log('   ---');
    });
    console.groupEnd();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    collisions.forEach((collision, index) => {
      if (collision.type === 'token') {
        this._processTokenHit(collision.object, index === 0, index + 1, collisions.length);
      } else if (collision.type === 'wall') {
        this._processWallHit(collision.object, index + 1, collisions.length);
      } else if (collision.type === 'tile') {
        this._processTileHit(collision.object, index + 1, collisions.length);
      }
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    const tokenHits = collisions.filter(c => c.type === 'token').length;
    const wallHits = collisions.filter(c => c.type === 'wall').length;
    const tileHits = collisions.filter(c => c.type === 'tile').length;
    
    console.log(`üìã Hit Summary: ${tokenHits} tokens, ${wallHits} walls, ${tileHits} tiles`);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
   */
  _processTokenHit(target, isPrimary = true, hitNumber = 1, totalHits = 1) {
    const attacker = this.aimingToken;
    
    console.log(`üéØ Token Hit #${hitNumber}: ${attacker.name} -> ${target.name}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ø–∞–¥–∞–Ω–∏—è
    const hitType = isPrimary ? '–ü–µ—Ä–≤–∏—á–Ω–æ–µ' : '–ü—Ä–æ–±–∏–≤–∞—é—â–µ–µ';
    const hitMessage = totalHits > 1 ? 
      `üéØ ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${target.name}! (${hitType} –ø–æ–ø–∞–¥–∞–Ω–∏–µ #${hitNumber} –∏–∑ ${totalHits})` :
      `üéØ ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${target.name}!`;
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
    ChatMessage.create({
      content: hitMessage,
      speaker: ChatMessage.getSpeaker({ token: attacker })
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å—Ç–µ–Ω—É
   */
  _processWallHit(wall, hitNumber = 1, totalHits = 1) {
    const attacker = this.aimingToken;
    
    console.log(`üí• Wall Hit #${hitNumber}: ${attacker.name} -> Wall (${wall.id})`);
    console.log(`   Wall type: ${wall.document.door ? 'Door' : 'Wall'}`);
    console.log(`   Wall state: ${wall.document.ds ? 'Open' : 'Closed'}`);
    
    const wallType = wall.document.door ? '–¥–≤–µ—Ä—å' : '—Å—Ç–µ–Ω—É';
    const hitMessage = totalHits > 1 ?
      `üí• ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${wallType}! (–ü–æ–ø–∞–¥–∞–Ω–∏–µ #${hitNumber} –∏–∑ ${totalHits})` :
      `üí• ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ${wallType}!`;
    
    ChatMessage.create({
      content: hitMessage,
      speaker: ChatMessage.getSpeaker({ token: attacker })
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç–∞–π–ª
   */
  _processTileHit(tile, hitNumber = 1, totalHits = 1) {
    const attacker = this.aimingToken;
    
    console.log(`üè† Tile Hit #${hitNumber}: ${attacker.name} -> Tile (${tile.id})`);
    
    const hitMessage = totalHits > 1 ?
      `üè† ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—ä–µ–∫—Ç! (–ü–æ–ø–∞–¥–∞–Ω–∏–µ #${hitNumber} –∏–∑ ${totalHits})` :
      `üè† ${attacker.name} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—ä–µ–∫—Ç!`;
    
    ChatMessage.create({
      content: hitMessage,
      speaker: ChatMessage.getSpeaker({ token: attacker })
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
   */
  _getCollisionIcon(type) {
    const icons = {
      'token': 'üì∫',  // —Ç–æ–∫–µ–Ω
      'wall': 'üßØ',   // —Å—Ç–µ–Ω–∞
      'tile': 'üè†',   // —Ç–∞–π–ª
      'door': 'üö™',   // –¥–≤–µ—Ä—å
    };
    
    return icons[type] || '‚ùì'; // –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
  }
  
  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _notifyAimingStart() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∫–µ—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
  }
  
  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
   */
  _notifyAimingEnd() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∫–µ—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
   */
  _registerSettings() {
    const MODULE_NS = 'spaceholder';
    const PREF = 'aimingsystem';
    
    game.settings.register(MODULE_NS, `${PREF}.maxRayDistance`, {
      name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞',
      hint: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª—É—á–µ–π –≤ –ø–∏–∫—Å–µ–ª—è—Ö',
      scope: 'world',
      config: false,
      default: 2000,
      type: Number,
    });
    
    game.settings.register(MODULE_NS, `${PREF}.showAimingReticle`, {
      name: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É',
      hint: '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø—Ä–∏—Ü–µ–ª—å–Ω—É—é —Å–µ—Ç–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è',
      scope: 'client',
      config: false,
      default: true,
      type: Boolean,
    });
    
    game.settings.register(MODULE_NS, `${PREF}.aimingSensitivity`, {
      name: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è',
      hint: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏—Ü–µ–ª–∞',
      scope: 'client',
      config: false,
      default: 1.0,
      type: Number,
    });
    
    game.settings.register(MODULE_NS, `${PREF}.maxRicochets`, {
      name: '–ú–∞–∫—Å–∏–º—É–º —Ä–∏–∫–æ—à–µ—Ç–æ–≤',
      hint: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏–∫–æ—à–µ—Ç–æ–≤ –æ—Ç —Å—Ç–µ–Ω',
      scope: 'world',
      config: false,
      default: 3,
      type: Number,
      range: {
        min: 0,
        max: 10,
        step: 1
      }
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
   */
  getSetting(key) {
    return game.settings.get('spaceholder', `aimingsystem.${key}`);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
export function registerAimingSystemSettings() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ AimingSystem
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
export function installAimingSystemHooks() {
  // –•—É–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ç–∞–∫
  Hooks.on('preItemRoll', (item, rollConfig) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—Ç–∏–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    if (item.type === 'item' && item.actor?.getActiveTokens()?.[0]) {
      const token = item.actor.getActiveTokens()[0];
      const aimingSystem = game.spaceholder?.aimingSystem;
      
      if (aimingSystem && game.keyboard.isModifierActive('alt')) {
        // Alt + –∫–ª–∏–∫ = –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∞—Ç–∞–∫–∏
        aimingSystem.startAiming(token, item);
        return false; // –û—Ç–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π —Ä–æ–ª–ª
      }
    }
  });
  
  // –•—É–∫ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ö–æ–ª—Å—Ç–∞
  Hooks.on('canvasReady', () => {
    const aimingSystem = game.spaceholder?.aimingSystem;
    if (aimingSystem) {
      aimingSystem.rayRenderer.onCanvasReady();
    }
  });
}