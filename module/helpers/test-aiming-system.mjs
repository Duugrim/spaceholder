// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è SpaceHolder
// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

export class AimingSystemTester {
  constructor() {
    this.tests = [];
  }
  
  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests() {
    console.log('SpaceHolder | AimingSystemTester: Starting tests...');
    
    const results = {
      passed: 0,
      failed: 0,
      errors: []
    };
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
      await this.testInitialization();
      results.passed++;
      console.log('‚úì Test 1: Initialization - PASSED');
    } catch (error) {
      results.failed++;
      results.errors.push({ test: 'Initialization', error: error.message });
      console.error('‚úó Test 1: Initialization - FAILED:', error.message);
    }
    
    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ª—É—á–∞
    try {
      await this.testRayCreation();
      results.passed++;
      console.log('‚úì Test 2: Ray Creation - PASSED');
    } catch (error) {
      results.failed++;
      results.errors.push({ test: 'Ray Creation', error: error.message });
      console.error('‚úó Test 2: Ray Creation - FAILED:', error.message);
    }
    
    // –¢–µ—Å—Ç 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    try {
      await this.testVisualization();
      results.passed++;
      console.log('‚úì Test 3: Visualization - PASSED');
    } catch (error) {
      results.failed++;
      results.errors.push({ test: 'Visualization', error: error.message });
      console.error('‚úó Test 3: Visualization - FAILED:', error.message);
    }
    
    console.log(`SpaceHolder | AimingSystemTester: Tests completed. Passed: ${results.passed}, Failed: ${results.failed}`);
    return results;
  }
  
  /**
   * –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async testInitialization() {
    if (!game.spaceholder?.aimingSystem) {
      throw new Error('AimingSystem not found in game.spaceholder');
    }
    
    const aimingSystem = game.spaceholder.aimingSystem;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!aimingSystem.rayCaster) {
      throw new Error('RayCaster not initialized');
    }
    
    if (!aimingSystem.rayRenderer) {
      throw new Error('RayRenderer not initialized');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (aimingSystem.isAiming !== false) {
      throw new Error('Initial aiming state should be false');
    }
    
    if (aimingSystem.aimingToken !== null) {
      throw new Error('Initial aiming token should be null');
    }
  }
  
  /**
   * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª—É—á–∞
   */
  async testRayCreation() {
    const aimingSystem = game.spaceholder.aimingSystem;
    const rayCaster = aimingSystem.rayCaster;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª—É—á
    const origin = { x: 100, y: 100 };
    const direction = 45; // 45 –≥—Ä–∞–¥—É—Å–æ–≤
    const maxDistance = 500;
    
    const ray = rayCaster.createRay(origin, direction, maxDistance);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ª—É—á–∞
    if (!ray.id) {
      throw new Error('Ray should have an ID');
    }
    
    if (ray.origin.x !== origin.x || ray.origin.y !== origin.y) {
      throw new Error('Ray origin mismatch');
    }
    
    if (ray.direction !== direction) {
      throw new Error('Ray direction mismatch');
    }
    
    if (ray.maxDistance !== maxDistance) {
      throw new Error('Ray max distance mismatch');
    }
    
    if (!ray.segments || ray.segments.length === 0) {
      throw new Error('Ray should have segments');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
    const expectedEndX = origin.x + Math.cos(direction * Math.PI / 180) * maxDistance;
    const expectedEndY = origin.y + Math.sin(direction * Math.PI / 180) * maxDistance;
    
    const tolerance = 0.1;
    if (Math.abs(ray.end.x - expectedEndX) > tolerance || Math.abs(ray.end.y - expectedEndY) > tolerance) {
      throw new Error('Ray end point calculation error');
    }
  }
  
  /**
   * –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async testVisualization() {
    const aimingSystem = game.spaceholder.aimingSystem;
    const rayRenderer = aimingSystem.rayRenderer;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ canvas –¥–æ—Å—Ç—É–ø–µ–Ω
    if (!canvas?.stage) {
      throw new Error('Canvas not available for visualization test');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    rayRenderer._createContainers();
    
    if (!rayRenderer.aimingContainer) {
      throw new Error('Aiming container not created');
    }
    
    if (!rayRenderer.rayContainer) {
      throw new Error('Ray container not created');
    }
    
    if (!rayRenderer.reticleContainer) {
      throw new Error('Reticle container not created');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª—É—á –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É
    const testRay = aimingSystem.rayCaster.createRay({ x: 100, y: 100 }, 0, 200);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫)
    rayRenderer.updateAimingPreview(testRay);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    rayRenderer.clearAll();
  }
  
  /**
   * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å —Ç–æ–∫–µ–Ω–æ–º (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤—ã–±—Ä–∞–Ω)
   */
  async testWithSelectedToken() {
    const controlled = canvas.tokens.controlled;
    
    if (controlled.length === 0) {
      ui.notifications.warn('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return false;
    }
    
    const token = controlled[0];
    const aimingSystem = game.spaceholder.aimingSystem;
    
    ui.notifications.info('–ó–∞–ø—É—Å–∫ 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
    const success = aimingSystem.startAiming(token);
    
    if (!success) {
      throw new Error('Failed to start aiming');
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (aimingSystem.isAiming) {
        aimingSystem.stopAiming();
        ui.notifications.info('–¢–µ—Å—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    }, 5000);
    
    return true;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testAimingSystem = async function() {
  const tester = new AimingSystemTester();
  const results = await tester.runAllTests();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç–µ
  const content = `
    <div style="background: #f0f0f0; padding: 10px; border-radius: 5px;">
      <h3 style="color: #333; margin: 0;">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è</h3>
      <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> ${results.passed}</p>
      <p><strong>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</strong> ${results.failed}</p>
      ${results.errors.length > 0 ? `
        <details>
          <summary>–û—à–∏–±–∫–∏:</summary>
          <ul>
            ${results.errors.map(e => `<li><strong>${e.test}:</strong> ${e.error}</li>`).join('')}
          </ul>
        </details>
      ` : ''}
    </div>
  `;
  
  ChatMessage.create({
    content: content,
    speaker: { alias: "–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" }
  });
  
  return results;
};

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
window.testAimingWithToken = async function() {
  const tester = new AimingSystemTester();
  try {
    await tester.testWithSelectedToken();
  } catch (error) {
    ui.notifications.error('–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ' + error.message);
    console.error(error);
  }
};